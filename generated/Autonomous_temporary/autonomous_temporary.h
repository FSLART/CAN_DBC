/**
 * @file autonomous_temporary.h
 *
 * @brief This header file was generated by cantools version 40.3.0 Thu Aug  7 22:38:22 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef AUTONOMOUS_TEMPORARY_H
#define AUTONOMOUS_TEMPORARY_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_FRAME_ID (0x51u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_FRAME_ID (0x61u)
#define AUTONOMOUS_TEMPORARY_VCU_RPM_FRAME_ID (0x509u)
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_FRAME_ID (0x500u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_FRAME_ID (0x71u)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_FRAME_ID (0x513u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_FRAME_ID (0x503u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_FRAME_ID (0x81u)
#define AUTONOMOUS_TEMPORARY_RES_FRAME_ID (0x191u)
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_FRAME_ID (0x446u)
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG2_FRAME_ID (0x456u)
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_FRAME_ID (0x546u)
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG2_FRAME_ID (0x556u)
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_FRAME_ID (0x511u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_FRAME_ID (0x600u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_FRAME_ID (0x700u)
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_FRAME_ID (0x610u)
#define AUTONOMOUS_TEMPORARY_RPM_TARGET_FRAME_ID (0x499u)
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_FRAME_ID (0x605u)
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_FRAME_ID (0x613u)
#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_FRAME_ID (0x205u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_FRAME_ID (0x405u)
#define AUTONOMOUS_TEMPORARY_MAXON_PROFILE_RX_FRAME_ID (0x305u)
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_FRAME_ID (0x185u)
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_FRAME_ID (0x285u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_FRAME_ID (0x385u)
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_FRAME_ID (0x485u)

/* Frame lengths in bytes. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_VCU_RPM_LENGTH (2u)
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_LENGTH (5u)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_LENGTH (1u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_LENGTH (3u)
#define AUTONOMOUS_TEMPORARY_RES_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_LENGTH (6u)
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG2_LENGTH (4u)
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_LENGTH (6u)
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG2_LENGTH (4u)
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_LENGTH (4u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_RPM_TARGET_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_LENGTH (2u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_LENGTH (6u)
#define AUTONOMOUS_TEMPORARY_MAXON_PROFILE_RX_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_LENGTH (8u)
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_LENGTH (8u)

/* Extended or standard frame types. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_VCU_RPM_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_AS_STATE_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_VCU_HV_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_RES_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG2_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG2_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_RPM_TARGET_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_PROFILE_RX_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_IS_EXTENDED (0)
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_MANUAL_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_ACCELERATION_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_SKIDPAD_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_TRACKDRIVE_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_BRAKETEST_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_INSPECTION_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_AUTOCROSS_CHOICE (6u)

#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_MANUAL_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_ACCELERATION_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_SKIDPADD_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_TRACKDRIVE_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_BRAKETEST_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_INSPECTION_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_AUTOCROSS_CHOICE (6u)

#define AUTONOMOUS_TEMPORARY_ACU_IGN_IGN_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_IGN_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_ACU_IGN_ASMS_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_ASMS_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_ACU_IGN_EMERGENCY_EMERGENCY_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_IGN_EMERGENCY_EMERGENCY_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_RD_JETSON_RD_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_RD_JETSON_RD_ON_CHOICE (1u)

#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_OFF_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_READY_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_DRIVING_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_EMERGENCY_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_FINISH_CHOICE (5u)

#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_HV_OFF_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_HV_ON_CHOICE (9u)
#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_CONTACTOR_ERROR_CHOICE (10u)

#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_EMERGENCY_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_GO_SIGNAL_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_GO_SIGNAL_2_CHOICE (7u)

#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_INIT_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_SHUTDOWN_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_STANDBY_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_PRECHARGE_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_WAIT_R2_D_MANUAL_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_WAIT_R2_D_AUTO_CHOICE (6u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_READY_MANUAL_CHOICE (7u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_READY_AUTO_CHOICE (8u)
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_EMERGENCY_CHOICE (9u)

#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_INIT_CHOICE (0u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_MS_CHOICE (1u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_JETSON_WAITING_CHOICE (2u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_IBIT_SEQ_CHOICE (3u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_READY_CHOICE (4u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_DRIVING_CHOICE (5u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_EBS_EROR_CHOICE (6u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_EMERGENCY_CHOICE (7u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_FINISHED_CHOICE (8u)
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_MANUAL_CHOICE (9u)

#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_CONTROL_WORD_SHUTDOWN_CHOICE (6u)
#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_CONTROL_WORD_NEW_POSITION_BIT_CHOICE (15u)

#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_CONTROL_WORD_ABSOLUTE_POSITION_CHOICE (31u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_CONTROL_WORD_ABSOLUTE_POSITION_IMMEDIATLY_CHOICE (63u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_CONTROL_WORD_RELATIVE_POSITION_CHOICE (95u)
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_CONTROL_WORD_RELATIVE_POSITION_IMMEDIATLY_CHOICE (127u)

/* Frame Names. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_NAME "ACU_MS"
#define AUTONOMOUS_TEMPORARY_JETSON_MS_NAME "JETSON_MS"
#define AUTONOMOUS_TEMPORARY_VCU_RPM_NAME "VCU_RPM"
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_NAME "DL_MSG_1"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_NAME "ACU_IGN"
#define AUTONOMOUS_TEMPORARY_RD_JETSON_NAME "RD_JETSON"
#define AUTONOMOUS_TEMPORARY_AS_STATE_NAME "AS_STATE"
#define AUTONOMOUS_TEMPORARY_VCU_HV_NAME "VCU_HV"
#define AUTONOMOUS_TEMPORARY_RES_NAME "RES"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_NAME "DYN_FRONT_SIG1"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG2_NAME "DYN_FRONT_SIG2"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_NAME "DYN_REAR_SIG1"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG2_NAME "DYN_REAR_SIG2"
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_NAME "ASF_SIGNALS"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_NAME "VCU_IGN_R2D"
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_NAME "ACU_status"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_NAME "VCU_APPS_RAW"
#define AUTONOMOUS_TEMPORARY_RPM_TARGET_NAME "RPM_TARGET"
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_NAME "JETSON_DEBUG"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_NAME "JETSON_DATA_1"
#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_NAME "Maxon_mode_rx"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_NAME "Maxon_position_rx"
#define AUTONOMOUS_TEMPORARY_MAXON_PROFILE_RX_NAME "Maxon_profile_rx"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_NAME "Maxon_status_tx"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_NAME "Maxon_status2_tx"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_NAME "Maxon_position_tx"
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_NAME "Maxon_velocity_tx"

/* Signal Names. */
#define AUTONOMOUS_TEMPORARY_ACU_MS_MISSION_SELECT_NAME "Mission_Select"
#define AUTONOMOUS_TEMPORARY_JETSON_MS_MISSION_SELECT_NAME "Mission_Select"
#define AUTONOMOUS_TEMPORARY_VCU_RPM_RPM_ACTUAL_NAME "rpm_actual"
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_SPEED_ACTUAL_NAME "Speed_actual"
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_SPEED_TARGET_NAME "Speed_target"
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_STEERING_ANGLE_ACTUAL_NAME "Steering_angle_actual"
#define AUTONOMOUS_TEMPORARY_DL_MSG_1_STEERING_ANGLE_TARGET_NAME "Steering_angle_target"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_IGN_NAME "IGN"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_ASMS_NAME "ASMS"
#define AUTONOMOUS_TEMPORARY_ACU_IGN_EMERGENCY_NAME "Emergency"
#define AUTONOMOUS_TEMPORARY_RD_JETSON_RD_NAME "RD"
#define AUTONOMOUS_TEMPORARY_AS_STATE_STATE_NAME "STATE"
#define AUTONOMOUS_TEMPORARY_VCU_HV_HV_NAME "HV"
#define AUTONOMOUS_TEMPORARY_VCU_HV_BRAKE_PRESSURE_FRONT_NAME "Brake_pressure_Front"
#define AUTONOMOUS_TEMPORARY_VCU_HV_BRAKE_PRESSURE_REAR_NAME "Brake_pressure_Rear"
#define AUTONOMOUS_TEMPORARY_RES_SIGNAL_NAME "SIGNAL"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_ST_ANGLE_NAME "ST_ANGLE"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_SUSP_R_NAME "SUSP_R"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG1_SUSP_L_NAME "SUSP_L"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG2_SPD_LEFT_NAME "SPD_LEFT"
#define AUTONOMOUS_TEMPORARY_DYN_FRONT_SIG2_SPD_RIGHT_NAME "SPD_RIGHT"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_BRK_PRESS_NAME "BRK_PRESS"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_SUSP_R_NAME "SUSP_R"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG1_SUSP_L_NAME "SUSP_L"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG2_SPD_LEFT_NAME "SPD_LEFT"
#define AUTONOMOUS_TEMPORARY_DYN_REAR_SIG2_SPD_RIGHT_NAME "SPD_RIGHT"
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_EBS_PRESSURE_TANK_FRONT_NAME "EBS_Pressure_Tank_Front"
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_EBS_PRESSURE_TANK_REAR_NAME "EBS_Pressure_Tank_Rear"
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_BRAKE_PRESSURE_FRONT_NAME "Brake_Pressure_Front"
#define AUTONOMOUS_TEMPORARY_ASF_SIGNALS_BRAKE_PRESSURE_REAR_NAME "Brake_Pressure_Rear"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_IGNITION_MANUAL_NAME "ignition_manual"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_R2D_MANUAL_NAME "r2d_manual"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_IGNITION_AUTO_NAME "ignition_auto"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_R2D_AUTO_NAME "r2d_auto"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_SHUTDOWN_SIGNAL_NAME "shutdown_signal"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_VCU_STATE_NAME "vcu_state"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_R2_D_BUTTON_RAW_NAME "R2D_button_raw"
#define AUTONOMOUS_TEMPORARY_VCU_IGN_R2_D_IGNITION_SWITCH_RAW_NAME "Ignition_switch_raw"
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ACU_STATE_NAME "ACU_State"
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_ASSI_STATE_NAME "assi_state"
#define AUTONOMOUS_TEMPORARY_ACU_STATUS_INTERNAL_TEMPERATURE_NAME "Internal_temperature"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_APPS_1_RAW_BITS_NAME "APPS_1_raw_bits"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_APPS_2_RAW_BITS_NAME "APPS_2_raw_bits"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_DELTA_RAW_NAME "delta_raw"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_CPU_TEMP_NAME "cpu_temp"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_FLAG_DIGITAL_BSPD_NAME "flag_digital_bspd"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_APPS_ERROR_TYPE_NAME "apps_error_type"
#define AUTONOMOUS_TEMPORARY_VCU_APPS_RAW_APPS_1000_NAME "apps_1000"
#define AUTONOMOUS_TEMPORARY_RPM_TARGET_RPM_TARGET_NAME "rpm_target"
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_POS_X_NAME "POS_X"
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_POS_Y_NAME "POS_Y"
#define AUTONOMOUS_TEMPORARY_JETSON_DEBUG_TEMPERATURE_NAME "temperature"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_TARGET_ANGLE_NAME "target_angle"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_TARGET_SPEED_NAME "target_speed"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_ACTUAL_ANGLE_NAME "actual_angle"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_ACTUAL_SPEED_NAME "actual_speed"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_LAP_COUNT_NAME "lap_count"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_CURRENT_CONE_COUNT_NAME "current_cone_count"
#define AUTONOMOUS_TEMPORARY_JETSON_DATA_1_TOTAL_CONE_COUNT_NAME "total_cone_count"
#define AUTONOMOUS_TEMPORARY_MAXON_MODE_RX_CONTROL_WORD_NAME "Control_word"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_CONTROL_WORD_NAME "control_word"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_RX_TARGET_POSITION_NAME "target_position"
#define AUTONOMOUS_TEMPORARY_MAXON_PROFILE_RX_PROFILE_VELOCITY_NAME "profile_velocity"
#define AUTONOMOUS_TEMPORARY_MAXON_PROFILE_RX_PROFILE_ACCELERATION_NAME "profile_acceleration"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_STATUS_WORD_NAME "status_word"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_CONTROL_WORD_NAME "control_word"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS_TX_CURRENT_ACTUAL_VALUE_NAME "current_actual_value"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_ERROR_CODE_NAME "error_code"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_STATUS_WORD_NAME "status_word"
#define AUTONOMOUS_TEMPORARY_MAXON_STATUS2_TX_CURRENT_AVERAGE_VALUE_NAME "current_average_value"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_STATUS_WORD_NAME "status_word"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_ACTUAL_POSITION_NAME "actual_position"
#define AUTONOMOUS_TEMPORARY_MAXON_POSITION_TX_ACTUAL_TORQUE_NAME "actual_torque"
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_STATUS_WORD_NAME "status_word"
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_ACTUAL_VELOCITY_NAME "actual_velocity"
#define AUTONOMOUS_TEMPORARY_MAXON_VELOCITY_TX_PDW_DUTY_CICLE_ACTUAL_VALUE_NAME "pdw_duty_cicle_actual_value"

/**
 * Signals in message ACU_MS.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_acu_ms_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mission_select;
};

/**
 * Signals in message JETSON_MS.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_jetson_ms_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mission_select;
};

/**
 * Signals in message VCU_RPM.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_vcu_rpm_t {
    /**
     * valor que a vcu envia para jetson como feedback
     *
     * Range: 0..6000 (0..6000 RPM)
     * Scale: 1
     * Offset: 0
     */
    int16_t rpm_actual;
};

/**
 * Signals in message DL_MSG_1.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_dl_msg_1_t {
    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t speed_actual;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t speed_target;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    int8_t steering_angle_actual;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    int8_t steering_angle_target;
};

/**
 * Signals in message ACU_IGN.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_acu_ign_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ign;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t asms;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t emergency;
};

/**
 * Signals in message RD_JETSON.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_rd_jetson_t {
    /**
     * Envia o estado da acu para a jetson
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rd;
};

/**
 * Signals in message AS_STATE.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_as_state_t {
    /**
     * Regulations
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t state;
};

/**
 * Signals in message VCU_HV.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_vcu_hv_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pressure_front;

    /**
     * not used, dynamics rear esta a mandar
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pressure_rear;
};

/**
 * Signals in message RES.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal;
};

/**
 * Signals in message DYN_FRONT_SIG1.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_dyn_front_sig1_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t st_angle;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t susp_r;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t susp_l;
};

/**
 * Signals in message DYN_FRONT_SIG2.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_dyn_front_sig2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t spd_left;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t spd_right;
};

/**
 * Signals in message DYN_REAR_SIG1.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_dyn_rear_sig1_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t brk_press;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t susp_r;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t susp_l;
};

/**
 * Signals in message DYN_REAR_SIG2.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_dyn_rear_sig2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t spd_left;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t spd_right;
};

/**
 * Signals in message ASF_SIGNALS.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_asf_signals_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint8_t ebs_pressure_tank_front;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint8_t ebs_pressure_tank_rear;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint8_t brake_pressure_front;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint8_t brake_pressure_rear;
};

/**
 * Signals in message VCU_IGN_R2D.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_vcu_ign_r2_d_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_manual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t r2d_manual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_auto;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t r2d_auto;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t shutdown_signal;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_state;

    /**
     * valor do botao raw
     * 
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t r2_d_button_raw;

    /**
     * valor do borao raw
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_switch_raw;
};

/**
 * Signals in message ACU_status.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_acu_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t assi_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_temperature;
};

/**
 * Signals in message VCU_APPS_RAW.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_vcu_apps_raw_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t apps_1_raw_bits;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t apps_2_raw_bits;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t delta_raw;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cpu_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t flag_digital_bspd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t apps_error_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t apps_1000;
};

/**
 * Signals in message RPM_TARGET.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_rpm_target_t {
    /**
     * valor da jetson para a vcu
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rpm_target;
};

/**
 * Signals in message JETSON_DEBUG.
 *
 * bytes livres para debug

 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_jetson_debug_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pos_x;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pos_y;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature;
};

/**
 * Signals in message JETSON_DATA_1.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_jetson_data_1_t {
    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t target_angle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t target_speed;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t actual_angle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t actual_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lap_count;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t current_cone_count;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t total_cone_count;
};

/**
 * Signals in message Maxon_mode_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_mode_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_word;
};

/**
 * Signals in message Maxon_position_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_position_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t target_position;
};

/**
 * Signals in message Maxon_profile_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_profile_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t profile_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t profile_acceleration;
};

/**
 * Signals in message Maxon_status_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_status_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t control_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t current_actual_value;
};

/**
 * Signals in message Maxon_status2_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_status2_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t error_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t current_average_value;
};

/**
 * Signals in message Maxon_position_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_position_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t actual_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t actual_torque;
};

/**
 * Signals in message Maxon_velocity_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct autonomous_temporary_maxon_velocity_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t actual_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdw_duty_cicle_actual_value;
};

/**
 * Pack message ACU_MS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_acu_ms_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_acu_ms_t *src_p,
    size_t size);

/**
 * Unpack message ACU_MS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_acu_ms_unpack(
    struct autonomous_temporary_acu_ms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACU_MS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_acu_ms_init(struct autonomous_temporary_acu_ms_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ms_mission_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ms_mission_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ms_mission_select_is_in_range(uint8_t value);

/**
 * Pack message JETSON_MS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_jetson_ms_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_jetson_ms_t *src_p,
    size_t size);

/**
 * Unpack message JETSON_MS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_jetson_ms_unpack(
    struct autonomous_temporary_jetson_ms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JETSON_MS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_jetson_ms_init(struct autonomous_temporary_jetson_ms_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_ms_mission_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_ms_mission_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_ms_mission_select_is_in_range(uint8_t value);

/**
 * Pack message VCU_RPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_vcu_rpm_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_vcu_rpm_t *src_p,
    size_t size);

/**
 * Unpack message VCU_RPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_vcu_rpm_unpack(
    struct autonomous_temporary_vcu_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_RPM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_vcu_rpm_init(struct autonomous_temporary_vcu_rpm_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t autonomous_temporary_vcu_rpm_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_rpm_rpm_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_rpm_rpm_actual_is_in_range(int16_t value);

/**
 * Pack message DL_MSG_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_dl_msg_1_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_dl_msg_1_t *src_p,
    size_t size);

/**
 * Unpack message DL_MSG_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_dl_msg_1_unpack(
    struct autonomous_temporary_dl_msg_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DL_MSG_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_dl_msg_1_init(struct autonomous_temporary_dl_msg_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_dl_msg_1_speed_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dl_msg_1_speed_actual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dl_msg_1_speed_actual_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_dl_msg_1_speed_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dl_msg_1_speed_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dl_msg_1_speed_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t autonomous_temporary_dl_msg_1_steering_angle_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dl_msg_1_steering_angle_actual_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dl_msg_1_steering_angle_actual_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t autonomous_temporary_dl_msg_1_steering_angle_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dl_msg_1_steering_angle_target_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dl_msg_1_steering_angle_target_is_in_range(int8_t value);

/**
 * Pack message ACU_IGN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_acu_ign_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_acu_ign_t *src_p,
    size_t size);

/**
 * Unpack message ACU_IGN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_acu_ign_unpack(
    struct autonomous_temporary_acu_ign_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACU_IGN.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_acu_ign_init(struct autonomous_temporary_acu_ign_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_ign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_ign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_ign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_asms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_asms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_asms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_ign_emergency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_ign_emergency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_ign_emergency_is_in_range(uint8_t value);

/**
 * Pack message RD_JETSON.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_rd_jetson_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_rd_jetson_t *src_p,
    size_t size);

/**
 * Unpack message RD_JETSON.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_rd_jetson_unpack(
    struct autonomous_temporary_rd_jetson_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RD_JETSON.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_rd_jetson_init(struct autonomous_temporary_rd_jetson_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_rd_jetson_rd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_rd_jetson_rd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_rd_jetson_rd_is_in_range(uint8_t value);

/**
 * Pack message AS_STATE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_as_state_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_as_state_t *src_p,
    size_t size);

/**
 * Unpack message AS_STATE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_as_state_unpack(
    struct autonomous_temporary_as_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AS_STATE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_as_state_init(struct autonomous_temporary_as_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_as_state_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_as_state_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_as_state_state_is_in_range(uint8_t value);

/**
 * Pack message VCU_HV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_vcu_hv_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_vcu_hv_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_vcu_hv_unpack(
    struct autonomous_temporary_vcu_hv_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_HV.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_vcu_hv_init(struct autonomous_temporary_vcu_hv_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_hv_hv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_hv_hv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_hv_hv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_hv_brake_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_hv_brake_pressure_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_hv_brake_pressure_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_hv_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_hv_brake_pressure_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_hv_brake_pressure_rear_is_in_range(uint8_t value);

/**
 * Pack message RES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_res_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_res_t *src_p,
    size_t size);

/**
 * Unpack message RES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_res_unpack(
    struct autonomous_temporary_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_res_init(struct autonomous_temporary_res_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_res_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_res_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_res_signal_is_in_range(uint8_t value);

/**
 * Pack message DYN_FRONT_SIG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_dyn_front_sig1_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_dyn_front_sig1_t *src_p,
    size_t size);

/**
 * Unpack message DYN_FRONT_SIG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_dyn_front_sig1_unpack(
    struct autonomous_temporary_dyn_front_sig1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DYN_FRONT_SIG1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_dyn_front_sig1_init(struct autonomous_temporary_dyn_front_sig1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t autonomous_temporary_dyn_front_sig1_st_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_front_sig1_st_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_front_sig1_st_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_front_sig1_susp_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_front_sig1_susp_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_front_sig1_susp_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_front_sig1_susp_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_front_sig1_susp_l_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_front_sig1_susp_l_is_in_range(uint16_t value);

/**
 * Pack message DYN_FRONT_SIG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_dyn_front_sig2_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_dyn_front_sig2_t *src_p,
    size_t size);

/**
 * Unpack message DYN_FRONT_SIG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_dyn_front_sig2_unpack(
    struct autonomous_temporary_dyn_front_sig2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DYN_FRONT_SIG2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_dyn_front_sig2_init(struct autonomous_temporary_dyn_front_sig2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_front_sig2_spd_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_front_sig2_spd_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_front_sig2_spd_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_front_sig2_spd_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_front_sig2_spd_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_front_sig2_spd_right_is_in_range(uint16_t value);

/**
 * Pack message DYN_REAR_SIG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_dyn_rear_sig1_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_dyn_rear_sig1_t *src_p,
    size_t size);

/**
 * Unpack message DYN_REAR_SIG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_dyn_rear_sig1_unpack(
    struct autonomous_temporary_dyn_rear_sig1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DYN_REAR_SIG1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_dyn_rear_sig1_init(struct autonomous_temporary_dyn_rear_sig1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_rear_sig1_brk_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_rear_sig1_brk_press_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_rear_sig1_brk_press_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_rear_sig1_susp_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_rear_sig1_susp_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_rear_sig1_susp_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_rear_sig1_susp_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_rear_sig1_susp_l_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_rear_sig1_susp_l_is_in_range(uint16_t value);

/**
 * Pack message DYN_REAR_SIG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_dyn_rear_sig2_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_dyn_rear_sig2_t *src_p,
    size_t size);

/**
 * Unpack message DYN_REAR_SIG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_dyn_rear_sig2_unpack(
    struct autonomous_temporary_dyn_rear_sig2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DYN_REAR_SIG2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_dyn_rear_sig2_init(struct autonomous_temporary_dyn_rear_sig2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_rear_sig2_spd_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_rear_sig2_spd_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_rear_sig2_spd_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_dyn_rear_sig2_spd_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_dyn_rear_sig2_spd_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_dyn_rear_sig2_spd_right_is_in_range(uint16_t value);

/**
 * Pack message ASF_SIGNALS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_asf_signals_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_asf_signals_t *src_p,
    size_t size);

/**
 * Unpack message ASF_SIGNALS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_asf_signals_unpack(
    struct autonomous_temporary_asf_signals_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ASF_SIGNALS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_asf_signals_init(struct autonomous_temporary_asf_signals_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_asf_signals_ebs_pressure_tank_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_asf_signals_ebs_pressure_tank_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_asf_signals_ebs_pressure_tank_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_asf_signals_ebs_pressure_tank_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_asf_signals_ebs_pressure_tank_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_asf_signals_ebs_pressure_tank_rear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_asf_signals_brake_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_asf_signals_brake_pressure_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_asf_signals_brake_pressure_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_asf_signals_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_asf_signals_brake_pressure_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_asf_signals_brake_pressure_rear_is_in_range(uint8_t value);

/**
 * Pack message VCU_IGN_R2D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_vcu_ign_r2_d_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_vcu_ign_r2_d_t *src_p,
    size_t size);

/**
 * Unpack message VCU_IGN_R2D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_vcu_ign_r2_d_unpack(
    struct autonomous_temporary_vcu_ign_r2_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_IGN_R2D.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_vcu_ign_r2_d_init(struct autonomous_temporary_vcu_ign_r2_d_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_ignition_manual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_ignition_manual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_ignition_manual_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_r2d_manual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_r2d_manual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_r2d_manual_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_ignition_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_ignition_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_ignition_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_r2d_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_r2d_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_r2d_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_shutdown_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_shutdown_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_shutdown_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_vcu_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_vcu_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_vcu_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_r2_d_button_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_r2_d_button_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_r2_d_button_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_ign_r2_d_ignition_switch_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_ign_r2_d_ignition_switch_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_ign_r2_d_ignition_switch_raw_is_in_range(uint8_t value);

/**
 * Pack message ACU_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_acu_status_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_acu_status_t *src_p,
    size_t size);

/**
 * Unpack message ACU_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_acu_status_unpack(
    struct autonomous_temporary_acu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACU_status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_acu_status_init(struct autonomous_temporary_acu_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_status_acu_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_status_acu_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_status_acu_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_status_assi_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_status_assi_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_status_assi_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_acu_status_internal_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_acu_status_internal_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_acu_status_internal_temperature_is_in_range(uint8_t value);

/**
 * Pack message VCU_APPS_RAW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_vcu_apps_raw_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_vcu_apps_raw_t *src_p,
    size_t size);

/**
 * Unpack message VCU_APPS_RAW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_vcu_apps_raw_unpack(
    struct autonomous_temporary_vcu_apps_raw_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_APPS_RAW.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_vcu_apps_raw_init(struct autonomous_temporary_vcu_apps_raw_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_apps_raw_apps_1_raw_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_apps_1_raw_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_apps_1_raw_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_apps_raw_apps_2_raw_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_apps_2_raw_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_apps_2_raw_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_apps_raw_delta_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_delta_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_delta_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_apps_raw_cpu_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_cpu_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_cpu_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_apps_raw_flag_digital_bspd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_flag_digital_bspd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_flag_digital_bspd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_vcu_apps_raw_apps_error_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_apps_error_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_apps_error_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_vcu_apps_raw_apps_1000_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_vcu_apps_raw_apps_1000_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_vcu_apps_raw_apps_1000_is_in_range(uint16_t value);

/**
 * Pack message RPM_TARGET.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_rpm_target_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_rpm_target_t *src_p,
    size_t size);

/**
 * Unpack message RPM_TARGET.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_rpm_target_unpack(
    struct autonomous_temporary_rpm_target_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RPM_TARGET.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_rpm_target_init(struct autonomous_temporary_rpm_target_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_rpm_target_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_rpm_target_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_rpm_target_rpm_target_is_in_range(uint16_t value);

/**
 * Pack message JETSON_DEBUG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_jetson_debug_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_jetson_debug_t *src_p,
    size_t size);

/**
 * Unpack message JETSON_DEBUG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_jetson_debug_unpack(
    struct autonomous_temporary_jetson_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JETSON_DEBUG.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_jetson_debug_init(struct autonomous_temporary_jetson_debug_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_jetson_debug_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_debug_pos_x_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_debug_pos_x_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_jetson_debug_pos_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_debug_pos_y_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_debug_pos_y_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_debug_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_debug_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_debug_temperature_is_in_range(uint8_t value);

/**
 * Pack message JETSON_DATA_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_jetson_data_1_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_jetson_data_1_t *src_p,
    size_t size);

/**
 * Unpack message JETSON_DATA_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_jetson_data_1_unpack(
    struct autonomous_temporary_jetson_data_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JETSON_DATA_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_jetson_data_1_init(struct autonomous_temporary_jetson_data_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_target_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_target_angle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_target_angle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_target_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_target_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_actual_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_actual_angle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_actual_angle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_actual_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_actual_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_actual_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_lap_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_lap_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_lap_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_current_cone_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_current_cone_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_current_cone_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_jetson_data_1_total_cone_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_jetson_data_1_total_cone_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_jetson_data_1_total_cone_count_is_in_range(uint8_t value);

/**
 * Pack message Maxon_mode_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_mode_rx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_mode_rx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_mode_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_mode_rx_unpack(
    struct autonomous_temporary_maxon_mode_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_mode_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_mode_rx_init(struct autonomous_temporary_maxon_mode_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_maxon_mode_rx_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_mode_rx_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_mode_rx_control_word_is_in_range(uint8_t value);

/**
 * Pack message Maxon_position_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_position_rx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_position_rx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_position_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_position_rx_unpack(
    struct autonomous_temporary_maxon_position_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_position_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_position_rx_init(struct autonomous_temporary_maxon_position_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t autonomous_temporary_maxon_position_rx_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_position_rx_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_position_rx_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_position_rx_target_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_position_rx_target_position_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_position_rx_target_position_is_in_range(uint32_t value);

/**
 * Pack message Maxon_profile_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_profile_rx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_profile_rx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_profile_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_profile_rx_unpack(
    struct autonomous_temporary_maxon_profile_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_profile_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_profile_rx_init(struct autonomous_temporary_maxon_profile_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_profile_rx_profile_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_profile_rx_profile_velocity_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_profile_rx_profile_velocity_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_profile_rx_profile_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_profile_rx_profile_acceleration_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_profile_rx_profile_acceleration_is_in_range(uint32_t value);

/**
 * Pack message Maxon_status_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_status_tx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_status_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_status_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_status_tx_unpack(
    struct autonomous_temporary_maxon_status_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_status_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_status_tx_init(struct autonomous_temporary_maxon_status_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_status_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_status_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_status_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_status_tx_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_status_tx_control_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_status_tx_control_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_status_tx_current_actual_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_status_tx_current_actual_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_status_tx_current_actual_value_is_in_range(uint32_t value);

/**
 * Pack message Maxon_status2_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_status2_tx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_status2_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_status2_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_status2_tx_unpack(
    struct autonomous_temporary_maxon_status2_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_status2_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_status2_tx_init(struct autonomous_temporary_maxon_status2_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_status2_tx_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_status2_tx_error_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_status2_tx_error_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_status2_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_status2_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_status2_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_status2_tx_current_average_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_status2_tx_current_average_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_status2_tx_current_average_value_is_in_range(uint32_t value);

/**
 * Pack message Maxon_position_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_position_tx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_position_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_position_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_position_tx_unpack(
    struct autonomous_temporary_maxon_position_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_position_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_position_tx_init(struct autonomous_temporary_maxon_position_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_position_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_position_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_position_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_position_tx_actual_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_position_tx_actual_position_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_position_tx_actual_position_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_position_tx_actual_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_position_tx_actual_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_position_tx_actual_torque_is_in_range(uint16_t value);

/**
 * Pack message Maxon_velocity_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int autonomous_temporary_maxon_velocity_tx_pack(
    uint8_t *dst_p,
    const struct autonomous_temporary_maxon_velocity_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_velocity_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int autonomous_temporary_maxon_velocity_tx_unpack(
    struct autonomous_temporary_maxon_velocity_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_velocity_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int autonomous_temporary_maxon_velocity_tx_init(struct autonomous_temporary_maxon_velocity_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_velocity_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_velocity_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_velocity_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t autonomous_temporary_maxon_velocity_tx_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_velocity_tx_actual_velocity_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_velocity_tx_actual_velocity_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t autonomous_temporary_maxon_velocity_tx_pdw_duty_cicle_actual_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double autonomous_temporary_maxon_velocity_tx_pdw_duty_cicle_actual_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool autonomous_temporary_maxon_velocity_tx_pdw_duty_cicle_actual_value_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
