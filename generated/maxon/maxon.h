/**
 * @file maxon.h
 *
 * @brief This header file was generated by cantools version 40.3.0 Tue Aug  5 18:41:21 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef MAXON_H
#define MAXON_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MAXON_MAXON_MODE_RX_FRAME_ID (0x205u)
#define MAXON_MAXON_POSITION_RX_FRAME_ID (0x405u)
#define MAXON_MAXON_PROFILE_RX_FRAME_ID (0x305u)
#define MAXON_MAXON_STATUS_TX_FRAME_ID (0x185u)
#define MAXON_MAXON_STATUS2_TX_FRAME_ID (0x285u)
#define MAXON_MAXON_POSITION_TX_FRAME_ID (0x385u)
#define MAXON_MAXON_VELOCITY_TX_FRAME_ID (0x485u)

/* Frame lengths in bytes. */
#define MAXON_MAXON_MODE_RX_LENGTH (2u)
#define MAXON_MAXON_POSITION_RX_LENGTH (6u)
#define MAXON_MAXON_PROFILE_RX_LENGTH (8u)
#define MAXON_MAXON_STATUS_TX_LENGTH (8u)
#define MAXON_MAXON_STATUS2_TX_LENGTH (8u)
#define MAXON_MAXON_POSITION_TX_LENGTH (8u)
#define MAXON_MAXON_VELOCITY_TX_LENGTH (8u)

/* Extended or standard frame types. */
#define MAXON_MAXON_MODE_RX_IS_EXTENDED (0)
#define MAXON_MAXON_POSITION_RX_IS_EXTENDED (0)
#define MAXON_MAXON_PROFILE_RX_IS_EXTENDED (0)
#define MAXON_MAXON_STATUS_TX_IS_EXTENDED (0)
#define MAXON_MAXON_STATUS2_TX_IS_EXTENDED (0)
#define MAXON_MAXON_POSITION_TX_IS_EXTENDED (0)
#define MAXON_MAXON_VELOCITY_TX_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define MAXON_MAXON_MODE_RX_CONTROL_WORD_SHUTDOWN_CHOICE (6u)
#define MAXON_MAXON_MODE_RX_CONTROL_WORD_NEW_POSITION_BIT_CHOICE (15u)

#define MAXON_MAXON_POSITION_RX_CONTROL_WORD_ABSOLUTE_POSITION_CHOICE (31u)
#define MAXON_MAXON_POSITION_RX_CONTROL_WORD_ABSOLUTE_POSITION_IMMEDIATLY_CHOICE (63u)
#define MAXON_MAXON_POSITION_RX_CONTROL_WORD_RELATIVE_POSITION_CHOICE (95u)
#define MAXON_MAXON_POSITION_RX_CONTROL_WORD_RELATIVE_POSITION_IMMEDIATLY_CHOICE (127u)

/* Frame Names. */
#define MAXON_MAXON_MODE_RX_NAME "Maxon_mode_rx"
#define MAXON_MAXON_POSITION_RX_NAME "Maxon_position_rx"
#define MAXON_MAXON_PROFILE_RX_NAME "Maxon_profile_rx"
#define MAXON_MAXON_STATUS_TX_NAME "Maxon_status_tx"
#define MAXON_MAXON_STATUS2_TX_NAME "Maxon_status2_tx"
#define MAXON_MAXON_POSITION_TX_NAME "Maxon_position_tx"
#define MAXON_MAXON_VELOCITY_TX_NAME "Maxon_velocity_tx"

/* Signal Names. */
#define MAXON_MAXON_MODE_RX_CONTROL_WORD_NAME "Control_word"
#define MAXON_MAXON_POSITION_RX_CONTROL_WORD_NAME "control_word"
#define MAXON_MAXON_POSITION_RX_TARGET_POSITION_NAME "target_position"
#define MAXON_MAXON_PROFILE_RX_PROFILE_VELOCITY_NAME "profile_velocity"
#define MAXON_MAXON_PROFILE_RX_PROFILE_ACCELERATION_NAME "profile_acceleration"
#define MAXON_MAXON_STATUS_TX_STATUS_WORD_NAME "status_word"
#define MAXON_MAXON_STATUS_TX_CONTROL_WORD_NAME "control_word"
#define MAXON_MAXON_STATUS_TX_CURRENT_ACTUAL_VALUE_NAME "current_actual_value"
#define MAXON_MAXON_STATUS2_TX_ERROR_CODE_NAME "error_code"
#define MAXON_MAXON_STATUS2_TX_STATUS_WORD_NAME "status_word"
#define MAXON_MAXON_STATUS2_TX_CURRENT_AVERAGE_VALUE_NAME "current_average_value"
#define MAXON_MAXON_POSITION_TX_STATUS_WORD_NAME "status_word"
#define MAXON_MAXON_POSITION_TX_ACTUAL_POSITION_NAME "actual_position"
#define MAXON_MAXON_POSITION_TX_ACTUAL_TORQUE_NAME "actual_torque"
#define MAXON_MAXON_VELOCITY_TX_STATUS_WORD_NAME "status_word"
#define MAXON_MAXON_VELOCITY_TX_ACTUAL_VELOCITY_NAME "actual_velocity"
#define MAXON_MAXON_VELOCITY_TX_PDW_DUTY_CICLE_ACTUAL_VALUE_NAME "pdw_duty_cicle_actual_value"

/**
 * Signals in message Maxon_mode_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_mode_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_word;
};

/**
 * Signals in message Maxon_position_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_position_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t target_position;
};

/**
 * Signals in message Maxon_profile_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_profile_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t profile_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t profile_acceleration;
};

/**
 * Signals in message Maxon_status_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_status_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t control_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t current_actual_value;
};

/**
 * Signals in message Maxon_status2_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_status2_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t error_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t current_average_value;
};

/**
 * Signals in message Maxon_position_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_position_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t actual_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t actual_torque;
};

/**
 * Signals in message Maxon_velocity_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct maxon_maxon_velocity_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t status_word;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t actual_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdw_duty_cicle_actual_value;
};

/**
 * Pack message Maxon_mode_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_mode_rx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_mode_rx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_mode_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_mode_rx_unpack(
    struct maxon_maxon_mode_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_mode_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_mode_rx_init(struct maxon_maxon_mode_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t maxon_maxon_mode_rx_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_mode_rx_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_mode_rx_control_word_is_in_range(uint8_t value);

/**
 * Pack message Maxon_position_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_position_rx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_position_rx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_position_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_position_rx_unpack(
    struct maxon_maxon_position_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_position_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_position_rx_init(struct maxon_maxon_position_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t maxon_maxon_position_rx_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_position_rx_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_position_rx_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_position_rx_target_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_position_rx_target_position_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_position_rx_target_position_is_in_range(uint32_t value);

/**
 * Pack message Maxon_profile_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_profile_rx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_profile_rx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_profile_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_profile_rx_unpack(
    struct maxon_maxon_profile_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_profile_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_profile_rx_init(struct maxon_maxon_profile_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_profile_rx_profile_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_profile_rx_profile_velocity_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_profile_rx_profile_velocity_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_profile_rx_profile_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_profile_rx_profile_acceleration_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_profile_rx_profile_acceleration_is_in_range(uint32_t value);

/**
 * Pack message Maxon_status_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_status_tx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_status_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_status_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_status_tx_unpack(
    struct maxon_maxon_status_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_status_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_status_tx_init(struct maxon_maxon_status_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_status_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_status_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_status_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_status_tx_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_status_tx_control_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_status_tx_control_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_status_tx_current_actual_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_status_tx_current_actual_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_status_tx_current_actual_value_is_in_range(uint32_t value);

/**
 * Pack message Maxon_status2_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_status2_tx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_status2_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_status2_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_status2_tx_unpack(
    struct maxon_maxon_status2_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_status2_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_status2_tx_init(struct maxon_maxon_status2_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_status2_tx_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_status2_tx_error_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_status2_tx_error_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_status2_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_status2_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_status2_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_status2_tx_current_average_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_status2_tx_current_average_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_status2_tx_current_average_value_is_in_range(uint32_t value);

/**
 * Pack message Maxon_position_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_position_tx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_position_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_position_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_position_tx_unpack(
    struct maxon_maxon_position_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_position_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_position_tx_init(struct maxon_maxon_position_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_position_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_position_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_position_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_position_tx_actual_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_position_tx_actual_position_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_position_tx_actual_position_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_position_tx_actual_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_position_tx_actual_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_position_tx_actual_torque_is_in_range(uint16_t value);

/**
 * Pack message Maxon_velocity_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int maxon_maxon_velocity_tx_pack(
    uint8_t *dst_p,
    const struct maxon_maxon_velocity_tx_t *src_p,
    size_t size);

/**
 * Unpack message Maxon_velocity_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int maxon_maxon_velocity_tx_unpack(
    struct maxon_maxon_velocity_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Maxon_velocity_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int maxon_maxon_velocity_tx_init(struct maxon_maxon_velocity_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_velocity_tx_status_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_velocity_tx_status_word_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_velocity_tx_status_word_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t maxon_maxon_velocity_tx_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_velocity_tx_actual_velocity_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_velocity_tx_actual_velocity_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t maxon_maxon_velocity_tx_pdw_duty_cicle_actual_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double maxon_maxon_velocity_tx_pdw_duty_cicle_actual_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool maxon_maxon_velocity_tx_pdw_duty_cicle_actual_value_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
