/**
 * @file ivt_s_31012025.h
 *
 * @brief This header file was generated by cantools version 40.2.3 Sat Jul 26 01:58:43 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef IVT_S_31012025_H
#define IVT_S_31012025_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define IVT_S_31012025_IVT_MSG_RESULT_WH_FRAME_ID (0x528u)
#define IVT_S_31012025_IVT_MSG_RESULT_AS_FRAME_ID (0x527u)
#define IVT_S_31012025_IVT_MSG_RESULT_W_FRAME_ID (0x526u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_FRAME_ID (0x511u)
#define IVT_S_31012025_IVT_MSG_RESULT_T_FRAME_ID (0x525u)
#define IVT_S_31012025_IVT_MSG_RESULT_U3_FRAME_ID (0x524u)
#define IVT_S_31012025_IVT_MSG_RESULT_U2_FRAME_ID (0x523u)
#define IVT_S_31012025_IVT_MSG_RESULT_U1_FRAME_ID (0x522u)
#define IVT_S_31012025_IVT_MSG_RESULT_I_FRAME_ID (0x521u)
#define IVT_S_31012025_IVT_MSG_CMD_FRAME_ID (0x411u)

/* Frame lengths in bytes. */
#define IVT_S_31012025_IVT_MSG_RESULT_WH_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESULT_AS_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESULT_W_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_LENGTH (8u)
#define IVT_S_31012025_IVT_MSG_RESULT_T_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESULT_U3_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESULT_U2_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESULT_U1_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_RESULT_I_LENGTH (6u)
#define IVT_S_31012025_IVT_MSG_CMD_LENGTH (8u)

/* Extended or standard frame types. */
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_W_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_T_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_RESULT_I_IS_EXTENDED (0)
#define IVT_S_31012025_IVT_MSG_CMD_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_ID_RESULT_WH_VT_RESULT_WH_CHOICE (7u)

#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_ID_RESULT_AS_VT_RESULT_AS_CHOICE (6u)

#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_ID_RESULT_W_VT_RESULT_W_CHOICE (5u)

#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_MEASUREMENT_ERROR_CHOICE (128u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_SYSTEM_ERROR_CHOICE (129u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_OVERALL_LOGDATA_CHOICE (130u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_LOGDATA_SINCE_RES_CHOICE (131u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_I_CHOICE (144u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_U1_CHOICE (145u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_U2_CHOICE (146u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_U3_CHOICE (147u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_T_CHOICE (148u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_W_CHOICE (149u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_AS_CHOICE (150u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_WH_CHOICE (151u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_COMMAND_CHOICE (157u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RESPONSE_CHOICE (159u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_I_CHOICE (160u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_U1_CHOICE (161u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_U2_CHOICE (162u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_U3_CHOICE (163u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_T_CHOICE (164u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_W_CHOICE (165u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_AS_CHOICE (166u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_WH_CHOICE (167u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_RESET_ERROR_LOGDATA_CHOICE (176u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_TRIGGER_CHOICE (177u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_STORE_CHOICE (178u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_OC_TEST_TIME_CHOICE (179u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_MODE_CHOICE (180u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_THRESHOLD_POS_CHOICE (181u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_THRESHOLD_NEG_CHOICE (182u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_DEVICE_ID_CHOICE (185u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_SW_VERSION_CHOICE (186u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_SERIALNUMBER_CHOICE (187u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_ART_NR_CHOICE (188u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_ALIVE_CHOICE (191u)
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CMD_WRONG_COMMAND_CHOICE (255u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESONSE_ALL_MEAS_ERRORS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESO_ERROR__OVERFLOW_ADC_CH_1_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR__UNDERFLOW_ADC_CH_1_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR__OVERFLOW_ADC_CH_2_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR__UNDERFLOW_ADC_CH_2_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR__VREF_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_CUR_MEAS_IMPLAUSIBLE_CHOICE (7u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP__ERROR_THERM_EMF_CORRECTION_CHOICE (8u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_MEAS_I1__OPEN_CIRC_CHOICE (9u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_MEAS_U1__OPEN_CIRC_CHOICE (10u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_MEAS_U2__OPEN_CIRC_CHOICE (11u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_MEAS_U3__OPEN_CIRC_CHOICE (12u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_NTC_H__OPEN_CIRC_CHOICE (13u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_NTC_I__OPEN_CIRC_CHOICE (14u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_RESP_ERROR_CALIBRATION_DATA_CHOICE (15u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESONSE_ALL__SYSTEM_ERRORS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR_CODE_CRC_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__PARAMETER_CRC_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR_CAN_BUS_RECEIVE__DATA_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR_CAN_BUS_TRANSMIT__DATA_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__OVERTEMP_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__UNDERTEMP_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__POWER_FAILURE_CHOICE (7u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__SYSTEM__CLOCK_CHOICE (8u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__SYSTEM__INIT_CHOICE (9u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__CONFIGURATION_CHOICE (10u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__OVERCURRENT_DETECTION_CHOICE (11u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR_EEPROM_R_W_CHOICE (12u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR_ADC__CLOCK_CHOICE (13u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__RESET_ILLEGAL_OPCODE_CHOICE (14u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__RESET__WATCHDOG_CHOICE (15u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_RESP_ERROR__RESET_EMC_CHOICE (16u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESPONSE_ON__OVERALL__LOGDATA_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP__AH_COUNTER_OVERALL_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP__AH_COUNTER_CHARGING_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP__AH_COUNTER_DISCHARGING_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_OVERALL_CHOICE (16u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (19u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (20u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (21u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (22u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (23u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (24u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_OC_POSITIVE_ACTIVATED_CHOICE (27u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_OC_NEGATIVE_ACTIVATED_CHOICE (28u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_CURRENT_MAXIMUM_CHOICE (33u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_CURRENT_MINIMUM_CHOICE (34u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_U1_MAXIMUM_CHOICE (35u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_U1_MINIMUM_CHOICE (36u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_U2_MAXMIMUM_CHOICE (37u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_U2_MINIMUM_CHOICE (38u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_U3_MAXIMUM_CHOICE (39u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_U3_MINIMUM_CHOICE (40u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_TEMP_MAXMIMUM_CHOICE (41u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_RESP_TEMP_MINIMUM_CHOICE (42u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESPONSE_ALL__LOGDATA__SINCE_RESET_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP__AH_COUNTER_OVERALL_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP__AH_COUNTER_CHARGING_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP__AH_COUNTER_DISCHARGING_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_OVERALL_CHOICE (16u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (19u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (20u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (21u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (22u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (23u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (24u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_OC_POSITIVE_ACTIVATED_CHOICE (27u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_OC_NEGATIVE_ACTIVATED_CHOICE (28u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_CURRENT_MAXIMUM_CHOICE (33u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_CURRENT_MINIMUM_CHOICE (34u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_U1_MAXIMUM_CHOICE (35u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_U1_MINIMUM_CHOICE (36u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_U2_MAXMIMUM_CHOICE (37u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_U2_MINIMUM_CHOICE (38u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_U3_MAXIMUM_CHOICE (39u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_U3_MINIMUM_CHOICE (40u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_TEMP_MAXMIMUM_CHOICE (41u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_RESP_TEMP_MINIMUM_CHOICE (42u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ALL_MEASUREMENT_ERRORS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR__OVERFLOW_ADC_CH1_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR__UNDERFLOW_ADC_CH1_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR__OVERFLOW_ADC_CH2_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR__UNDERFLOW_ADC_CH2_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR__VREF_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_CURRENT_IMPLAUSIBLE_CHOICE (7u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_THERMAL_EMF_CORRECTION_CHOICE (8u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CURRENT_MEAS_I1__OPEN_CIRCUIT_CHOICE (9u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_VOLTAGE_MEAS_U1__OPEN_CIRCUIT_CHOICE (10u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_VOLTAGE_MEAS_U2__OPEN_CIRCUIT_CHOICE (11u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_VOLTAGE_MEAS_U3__OPEN_CIRCUIT_CHOICE (12u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_NTC_H__OPEN_CIRCUIT_CHOICE (13u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_NTC_I__OPEN_CIRCUIT_CHOICE (14u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CALIBRATION_DATA__CHOICE (15u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ALL__SYSTEM_ERRORS_CHOICE (256u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__CODE_CRC_CHOICE (257u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__PARAMETER_CRC_CHOICE (258u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CAN_BUS_RECEIVE__DATA_CHOICE (259u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CAN_BUS_TRANSMIT__DATA_CHOICE (260u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_OVERTEMP_CHOICE (261u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_UNDERTEMP_CHOICE (262u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_POWER_FAILURE_CHOICE (263u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_SYSTEM_CLOCK_CHOICE (264u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_SYSTEM_INIT_CHOICE (265u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CONFIGURATION_CHOICE (266u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_OVERCURRENT_DETECTION_CHOICE (267u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_EEPROM_R_W_CHOICE (268u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ADC__CLOCK_CHOICE (269u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ILLEGAL_OPCODE_CHOICE (270u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RESET__WATCHDOG_CHOICE (271u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RESET_EMC_CHOICE (272u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ALL__LOGDATA__SINCE__RESET_CHOICE (512u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__AH_COUNTER_OVERALL_CHOICE (513u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__AH_COUNTER_CHARGING_CHOICE (514u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__AH_COUNTER_DISCHARGING_CHOICE (515u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__ENERGY_COUNTER_OVERALL_CHOICE (516u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__ENERGY_COUNTER_CHARGING_CHOICE (517u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__ENERGY_COUNTER_DISCHARGING_CHOICE (518u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUNTIME_OVERALL_CHOICE (528u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_CUR_IN_SPEC_LIMITS_CHOICE (529u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_CUR_OUT_SPEC_LIMITS_CHOICE (530u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (531u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (532u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (533u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (534u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (535u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (536u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_TEMP_IN_SPEC_LIMITS_CHOICE (537u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (538u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_OVERCUR_POS_ACTIVATED_CHOICE (539u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__RUN_OVERCUR_NEG_ACTIVATED_CHOICE (540u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__CURRENT_MAXIMUM_CHOICE (545u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET__CURRENT_MINIMUM_CHOICE (546u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U1_MAXIMUM_CHOICE (547u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U1_MINIMUM_CHOICE (548u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U2_MAXIMUM_CHOICE (549u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U2_MINIMUM_CHOICE (550u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U3_MAXIMUM_CHOICE (551u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U3_MINIMUM_CHOICE (552u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_TEMP_MAXIMUM_CHOICE (553u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_TEMP_MINIMUM_CHOICE (554u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TYPE_IVT__MOD_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TYPE_IVT_S_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_TRIGGER_MODE_I_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_TRIGGER_MODE_I_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_TRIGGER_MODE_I_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_TRIGGER_MODE_U1_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_TRIGGER_MODE_U1_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_TRIGGER_MODE_U1_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_TRIGGER_MODE_U2_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_TRIGGER_MODE_U2_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_TRIGGER_MODE_U2_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_TRIGGER_MODE_U3_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_TRIGGER_MODE_U3_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_TRIGGER_MODE_U3_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_TRIGGER_MODE_T_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_TRIGGER_MODE_T_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_TRIGGER_MODE_T_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_TRIGGER_MODE_W_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_TRIGGER_MODE_W_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_TRIGGER_MODE_W_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_TRIGGER_MODE_AS_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_TRIGGER_MODE_AS_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_TRIGGER_MODE_AS_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_TRIGGER_MODE_WH_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_TRIGGER_MODE_WH_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_TRIGGER_MODE_WH_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_ACTUAL_MODE_STOP_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_ACTUAL_MODE_RUN_CHOICE (1u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_100_A_CHOICE (100u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_300_A_CHOICE (300u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_500_A_CHOICE (500u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_1000_A_CHOICE (1000u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_2500_A_CHOICE (2500u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_STARTUP_MODE_STOP_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_STARTUP_MODE_RUN_CHOICE (1u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_VOLTAGE_CHAN_0__CHANNELS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_VOLTAGE_CHAN_3__CHANNELS_CHOICE (3u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TOI_I_CHOICE (3u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_NONE_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_CAN_1___TERMINATED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_CAN_2___NOT_TERMINATED_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_V_SUPPLY_12___24_V_NOMINAL_SUPPLY_VOLTAGE_CHOICE (1u)

#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_ID_RESULT_T_VT_RESULT_T_CHOICE (4u)

#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_ID_RESULT_U3_VT_RESULT_U3_CHOICE (3u)

#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_ID_RESULT_U2_VT_RESULT_U2_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_ID_RESULT_U1_VT_RESULT_U1_CHOICE (1u)

#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_ID_RESULT_I_VT_RESULT_I_CHOICE (0u)

#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_I_CHOICE (16u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_U1_CHOICE (17u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_U2_CHOICE (18u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_U3_CHOICE (19u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_T_CHOICE (20u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_W_CHOICE (21u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_AS_CHOICE (22u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_WH_CHOICE (23u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_CMD_CHOICE (29u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESPONSE_CHOICE (31u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_I_CHOICE (32u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_U1_CHOICE (33u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_U2_CHOICE (34u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_U3_CHOICE (35u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_T_CHOICE (36u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_W_CHOICE (37u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_AS_CHOICE (38u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_WH_CHOICE (39u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_RESET_ERR_LOG_CHOICE (48u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_TRIGGER_CHOICE (49u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_STORE_CHOICE (50u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_START_OC_TEST_CHOICE (51u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_CHOICE (52u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_THRESHOLD_POS_CHOICE (53u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_THRESHOLD_NEG_CHOICE (54u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_RESTART_TO_BITRATE_CHOICE (58u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_RESTART_TO_DEFAULT_CHOICE (61u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_SET_RESTART_CHOICE (63u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_MEASUREMENT_ERRORS_CHOICE (64u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_SYSTEM_ERRORS_CHOICE (65u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_OVERALL_LOGDATA_CHOICE (66u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_LOGDATA_SINCE_RESET_CHOICE (67u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_I_CHOICE (80u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_U1_CHOICE (81u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_U2_CHOICE (82u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_U3_CHOICE (83u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_T_CHOICE (84u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_W_CHOICE (85u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_AS_CHOICE (86u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_WH_CHOICE (87u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_COMMAND_CHOICE (93u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RESPONSE_CHOICE (95u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_I_CHOICE (96u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_U1_CHOICE (97u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_U2_CHOICE (98u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_U3_CHOICE (99u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_T_CHOICE (100u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_W_CHOICE (101u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_AS_CHOICE (102u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_WH_CHOICE (103u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_OC_TEST_TIME_CHOICE (115u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_MODE_CHOICE (116u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_THRESHOLD_POS_CHOICE (117u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_THRESHOLD_NEG_CHOICE (118u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_DEVICE_ID_CHOICE (121u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_SW_VERSION_CHOICE (122u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_SN_CHOICE (123u)
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_ART_NR_CHOICE (124u)

#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ALL_MEASUREMENT_ERRORS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR__OVERFLOW_ADC_CH1_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR__UNDERFLOW_ADC_CH1_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR__OVERFLOW_ADC_CH2_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR__UNDERFLOW_ADC_CH2_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR__VREF_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_CURRENT_IMPLAUSIBLE_CHOICE (7u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_THERMAL_EMF_CORRECTION_CHOICE (8u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_CURRENT_MEAS_I1__OPEN_CIRCUIT_CHOICE (9u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_VOLTAGE_MEAS_U1__OPEN_CIRCUIT_CHOICE (10u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_VOLTAGE_MEAS_U2__OPEN_CIRCUIT_CHOICE (11u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_VOLTAGE_MEAS_U3__OPEN_CIRCUIT_CHOICE (12u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_NTC_H__OPEN_CIRCUIT_CHOICE (13u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_NTC_I__OPEN_CIRCUIT_CHOICE (14u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_CALIBRATION_DATA__CHOICE (15u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ALL__SYSTEM_ERRORS_CHOICE (256u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__CODE_CRC_CHOICE (257u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__PARAMETER_CRC_CHOICE (258u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_CAN_BUS_RECEIVE__DATA_CHOICE (259u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_CAN_BUS_TRANSMIT__DATA_CHOICE (260u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_OVERTEMP_CHOICE (261u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_UNDERTEMP_CHOICE (262u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_POWER_FAILURE_CHOICE (263u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_SYSTEM_CLOCK_CHOICE (264u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_SYSTEM_INIT_CHOICE (265u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_CONFIGURATION_CHOICE (266u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_OVERCURRENT_DETECTION_CHOICE (267u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_EEPROM_R_W_CHOICE (268u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ADC__CLOCK_CHOICE (269u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ILLEGAL_OPCODE_CHOICE (270u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RESET__WATCHDOG_CHOICE (271u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RESET_EMC_CHOICE (272u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_ALL__LOGDATA__SINCE__RESET_CHOICE (512u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__AH_COUNTER_OVERALL_CHOICE (513u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__AH_COUNTER_CHARGING_CHOICE (514u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__AH_COUNTER_DISCHARGING_CHOICE (515u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__ENERGY_COUNTER_OVERALL_CHOICE (516u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__ENERGY_COUNTER_CHARGING_CHOICE (517u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__ENERGY_COUNTER_DISCHARGING_CHOICE (518u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUNTIME_OVERALL_CHOICE (528u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_CUR_IN_SPEC_LIMITS_CHOICE (529u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_CUR_OUT_SPEC_LIMITS_CHOICE (530u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (531u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (532u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (533u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (534u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (535u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (536u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_TEMP_IN_SPEC_LIMITS_CHOICE (537u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (538u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_OVERCUR_POS_ACTIVATED_CHOICE (539u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__RUN_OVERCUR_NEG_ACTIVATED_CHOICE (540u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__CURRENT_MAXIMUM_CHOICE (545u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET__CURRENT_MINIMUM_CHOICE (546u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_U1_MAXIMUM_CHOICE (547u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_U1_MINIMUM_CHOICE (548u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_U2_MAXIMUM_CHOICE (549u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_U2_MINIMUM_CHOICE (550u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_U3_MAXIMUM_CHOICE (551u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_U3_MINIMUM_CHOICE (552u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_TEMP_MAXIMUM_CHOICE (553u)
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_RESET_TEMP_MINIMUM_CHOICE (554u)

#define IVT_S_31012025_IVT_MSG_CMD__3_A_RESTART_TO_BITRATE_1000K_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_CMD__3_A_RESTART_TO_BITRATE_500K_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_CMD__3_A_RESTART_TO_BITRATE_250K_CHOICE (8u)

#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ALL_MEAS__ERRORS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR__OVERFLOW_ADC_CH_1_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR__UNDERFLOW_ADC_CH_1_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR__OVERFLOW_ADC_CH_2_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR__UNDERFLOW_ADC_CH_2_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR__VREF_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_CUR_MEAS_IMPLAUSIBLE_CHOICE (7u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_THERMAL_EMF_CORRECTION_CHOICE (8u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_CUR_MEAS_I1__OPEN_CIRC__CHOICE (9u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_VOLT_MEAS_U1__OPEN_CIRC__CHOICE (10u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_VOLT_MEAS_U2__OPEN_CIRC__CHOICE (11u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_VOLT_MEAS_U3__OPEN_CIRC__CHOICE (12u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_NTC_H__OPEN_CIRC__CHOICE (13u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_NTC_I__OPEN_CIRC__CHOICE (14u)
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_GET_ERROR_CALIBRATION_DATA_CHOICE (15u)

#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ALL__SYSTEM_ERRORS_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR__CODE_CRC_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR__CODE__PARAMETER_CRC_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_CAN__BUS_RECEIVE__DATA_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_CAN_BUS_TRANSMIT__DATA_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_OVERTEMP_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_UNDERTEMP_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_POWER_FAILURE_CHOICE (7u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_SYSTEM_CLOCK_CHOICE (8u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_SYSTEM_INIT_CHOICE (9u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_CONFIGURATION_CHOICE (10u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_OVERCURRENT_DETECTION_CHOICE (11u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_EEPROM_R_W_CHOICE (12u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_ADC_CLOCK_CHOICE (13u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_RESET_ILLEGAL_OPCODE_CHOICE (14u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_RESET__WATCHDOG_CHOICE (15u)
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_GET_ERROR_RESET_EMC_CHOICE (16u)

#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__OVERALL__LOGDATA_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__AH_COUNTER_OVERALL_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__AH_COUNTER_CHARGING_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__AH_COUNTER_DISCHARGING_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__RUNTIME_OVERALL_CHOICE (16u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_VOLT1_IN_SPEC_LIMITS_CHOICE (19u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_VOLT1_OUT_SPEC_LIMITS_CHOICE (20u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_VOLT2_IN_SPEC_LIMITS_CHOICE (21u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_VOLT2_OUT_SPEC_LIMITS_22_CHOICE (22u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_VOLT3_IN_SPEC_LIMITS_CHOICE (23u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_VOLT2_OUT_SPEC_LIMITS_24_CHOICE (24u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_OVERCUR_POS_ACTIVATED_CHOICE (27u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_RUN_OVERCUR_NEG_ACTIVATED_CHOICE (28u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_CURRENT_MAXIMUM_CHOICE (33u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_CURRENT_MINIMUM_CHOICE (34u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_U1_MAXMIMUM_CHOICE (35u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_U1_MINIMUM_CHOICE (36u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_U2_MAXIMUM_CHOICE (37u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_U2_MINIMUM_CHOICE (38u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_U3_MAXMIMUM__CHOICE (39u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET_U3_MINIMUM_CHOICE (40u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__TEMPERATURE_MAXIMUM_CHOICE (41u)
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_GET__TEMPERATURE_MINIMUM_CHOICE (42u)

#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__OVERALL__LOGDATA_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__AH_COUNTER_OVERALL_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__AH_COUNTER_CHARGING_CHOICE (2u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__AH_COUNTER_DISCHARGING_CHOICE (3u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__RUNTIME_OVERALL_CHOICE (16u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_VOLT1_IN_SPEC_LIMITS_CHOICE (19u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_VOLT1_OUT_SPEC_LIMITS_CHOICE (20u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_VOLT2_IN_SPEC_LIMITS_CHOICE (21u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_VOLT2_OUT_SPEC_LIMITS_22_CHOICE (22u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_VOLT3_IN_SPEC_LIMITS_CHOICE (23u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_VOLT2_OUT_SPEC_LIMITS_24_CHOICE (24u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_OVERCUR_POS_ACTIVATED_CHOICE (27u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_RUN_OVERCUR_NEG_ACTIVATED_CHOICE (28u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_CURRENT_MAXIMUM_CHOICE (33u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_CURRENT_MINIMUM_CHOICE (34u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_U1_MAXMIMUM_CHOICE (35u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_U1_MINIMUM_CHOICE (36u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_U2_MAXIMUM_CHOICE (37u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_U2_MINIMUM_CHOICE (38u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_U3_MAXMIMUM__CHOICE (39u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET_U3_MINIMUM_CHOICE (40u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__TEMPERATURE_MAXIMUM_CHOICE (41u)
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_GET__TEMPERATURE_MINIMUM_CHOICE (42u)

#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_TRIGGER_MODE_I_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_TRIGGER_MODE_I_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_TRIGGER_MODE_I_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_TRIGGER_MODE_U1_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_TRIGGER_MODE_U1_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_TRIGGER_MODE_U1_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_TRIGGER_MODE_U2_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_TRIGGER_MODE_U2_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_TRIGGER_MODE_U2_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_TRIGGER_MODE_U3_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_TRIGGER_MODE_U3_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_TRIGGER_MODE_U3_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_TRIGGER_MODE_T_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_TRIGGER_MODE_T_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_TRIGGER_MODE_T_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_TRIGGER_MODE_W_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_TRIGGER_MODE_W_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_TRIGGER_MODE_W_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_TRIGGER_MODE_AS_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_TRIGGER_MODE_AS_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_TRIGGER_MODE_AS_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_TRIGGER_MODE_WH_DISABLED_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_TRIGGER_MODE_WH_TRIGGERED_CHOICE (1u)
#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_TRIGGER_MODE_WH_CYCLIC_CHOICE (2u)

#define IVT_S_31012025_IVT_MSG_CMD__34_ACTUAL_MODE_STOP_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__34_ACTUAL_MODE_START_CHOICE (1u)

#define IVT_S_31012025_IVT_MSG_CMD__34_STARTUP_MODE_STOP_CHOICE (0u)
#define IVT_S_31012025_IVT_MSG_CMD__34_STARTUP_MODE_START_CHOICE (1u)

/* Frame Names. */
#define IVT_S_31012025_IVT_MSG_RESULT_WH_NAME "IVT_Msg_Result_Wh"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_NAME "IVT_Msg_Result_As"
#define IVT_S_31012025_IVT_MSG_RESULT_W_NAME "IVT_Msg_Result_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE_NAME "IVT_Msg_Response"
#define IVT_S_31012025_IVT_MSG_RESULT_T_NAME "IVT_Msg_Result_T"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_NAME "IVT_Msg_Result_U3"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_NAME "IVT_Msg_Result_U2"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_NAME "IVT_Msg_Result_U1"
#define IVT_S_31012025_IVT_MSG_RESULT_I_NAME "IVT_Msg_Result_I"
#define IVT_S_31012025_IVT_MSG_CMD_NAME "IVT_Msg_Cmd"

/* Signal Names. */
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_ID_RESULT_WH_NAME "IVT_ID_Result_Wh"
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_RESULT_WH_SYSTEM_ERROR_NAME "IVT_Result_Wh_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_RESULT_WH_MEASUREMENT_ERROR_NAME "IVT_Result_Wh_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_RESULT_WH_CHANNEL_ERROR_NAME "IVT_Result_Wh_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_RESULT_WH_OCS_NAME "IVT_Result_Wh_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_MSG_COUNT_RESULT_WH_NAME "IVT_MsgCount_Result_Wh"
#define IVT_S_31012025_IVT_MSG_RESULT_WH_IVT_RESULT_WH_NAME "IVT_Result_Wh"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_ID_RESULT_AS_NAME "IVT_ID_Result_As"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_RESULT_AS_SYSTEM_ERROR_NAME "IVT_Result_As_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_RESULT_AS_MEASUREMENT_ERROR_NAME "IVT_Result_As_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_RESULT_AS_CHANNEL_ERROR_NAME "IVT_Result_As_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_RESULT_AS_OCS_NAME "IVT_Result_As_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_MSG_COUNT_RESULT_AS_NAME "IVT_MsgCount_Result_As"
#define IVT_S_31012025_IVT_MSG_RESULT_AS_IVT_RESULT_AS_NAME "IVT_Result_As"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_ID_RESULT_W_NAME "IVT_ID_Result_W"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_RESULT_W_SYSTEM_ERROR_NAME "IVT_Result_W_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_RESULT_W_MEASUREMENT_ERROR_NAME "IVT_Result_W_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_RESULT_W_CHANNEL_ERROR_NAME "IVT_Result_W_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_RESULT_W_OCS_NAME "IVT_Result_W_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_MSG_COUNT_RESULT_W_NAME "IVT_MsgCount_Result_W"
#define IVT_S_31012025_IVT_MSG_RESULT_W_IVT_RESULT_W_NAME "IVT_Result_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_NAME "IVT_ID_Response"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_TRIGGER_SPARE_NAME "_B1_Trigger_spare"
#define IVT_S_31012025_IVT_MSG_RESPONSE__FF_WRONG_COMMAND_NAME "_FF_Wrong_Command"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BF_RESTART_ALIVE_CMD_ID_NAME "_BF_Restart_Alive_Cmd_ID"
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_ITEM_NAME "_80_Resp_MeasError_Item"
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_ITEM_NAME "_81_Resp_SystemError_Item"
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_ITEM_NAME "_82_Resp_AllLogData_Item"
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_ITEM_NAME "_83_Resp_LogData_Item"
#define IVT_S_31012025_IVT_MSG_RESPONSE__90_RESP_CAN_ID_VAL_I_NAME "_90_Resp_Can_ID_val_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__91_RESP_CAN_ID_VAL_U1_NAME "_91_Resp_Can_ID_val_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__92_RESP_CAN_ID_VAL_U2_NAME "_92_Resp_Can_ID_val_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__93_RESP_CAN_ID_VAL_U3_NAME "_93_Resp_Can_ID_val_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__94_RESP_CAN_ID_VAL_T_NAME "_94_Resp_Can_ID_val_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__95_RESP_CAN_ID_VAL_W_NAME "_95_Resp_Can_ID_val_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__96_RESP_CAN_ID_VAL_AS_NAME "_96_Resp_Can_ID_val_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__97_RESP_CAN_ID_VAL_WH_NAME "_97_Resp_Can_ID_val_Wh"
#define IVT_S_31012025_IVT_MSG_RESPONSE__9_D_RESP_CAN_ID_VAL_COMMAND_NAME "_9D_Resp_Can_ID_val_Command"
#define IVT_S_31012025_IVT_MSG_RESPONSE__9_F_RESP_CAN_ID_VAL_RESPONSE_NAME "_9F_Resp_Can_ID_val_Response"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_SIGN_I_NAME "_A0_Resp_Sign_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_SIGN_U1_NAME "_A1_Resp_Sign_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_SIGN_U2_NAME "_A2_Resp_Sign_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_SIGN_U3_NAME "_A3_Resp_Sign_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_SIGN_T_NAME "_A4_Resp_Sign_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_SIGN_W_NAME "_A5_Resp_Sign_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_SIGN_AS_NAME "_A6_Resp_Sign_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_SIGN_WH_NAME "_A7_Resp_Sign_WH"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_NAME "_B0_Resp_Reset_Item"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B2_RESP_STORE_DUMMY_NAME "_B2_Resp_Store_dummy"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B3_RESP_OC_TEST_TIME_NAME "_B3_Resp_Oc_Test_Time"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B5_RESP_OC_POS_SET_THRESHOLD_NAME "_B5_Resp_OC_Pos_Set_Threshold"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B6_RESP_OC_NEG_SET_THRESHOLD_NAME "_B6_Resp_OC_Neg_Set_Threshold"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TYPE_NAME "_B9_Resp_Device_type"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_MAJOR_HW_NAME "_BA_Resp_SW_Ver_Major_HW"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BB_RESP_SERIEN_NR_NAME "_BB_Resp_Serien_Nr"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BC_RESP_ART_N_NAME "_BC_Resp_Art_N"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_ENDIANESS_I_NAME "_A0_Resp_Endianess_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_ENDIANESS_U1_NAME "_A1_Resp_Endianess_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_ENDIANESS_U2_NAME "_A2_Resp_Endianess_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_ENDIANESS_U3_NAME "_A3_Resp_Endianess_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_ENDIANESS_T_NAME "_A4_Resp_Endianess_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_ENDIANESS_W_NAME "_A5_Resp_Endianess_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_ENDIANESS_AS_NAME "_A6_Resp_Endianess_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_ENDIANESS_WH_NAME "_A7_Resp_Endianess_WH"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_TRIGGER_MODE_I_NAME "_A0_Resp_TriggerMode_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_TRIGGER_MODE_U1_NAME "_A1_Resp_TriggerMode_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_TRIGGER_MODE_U2_NAME "_A2_Resp_TriggerMode_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_TRIGGER_MODE_U3_NAME "_A3_Resp_TriggerMode_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_TRIGGER_MODE_T_NAME "_A4_Resp_TriggerMode_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_TRIGGER_MODE_W_NAME "_A5_Resp_TriggerMode_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_TRIGGER_MODE_AS_NAME "_A6_Resp_TriggerMode_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_TRIGGER_MODE_WH_NAME "_A7_Resp_TriggerMode_WH"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_ACTUAL_MODE_NAME "_B4_Resp_Actual_Mode"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_07_TRIGGER_WH_NAME "_B1_07_Trigger_WH"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B2_RESP_STORE_DEVICE_SN_NAME "_B2_Resp_Store_Device_SN"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_MINOR_NAME "_BA_Resp_SW_Ver_Minor"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_NAME "_B9_Resp_Device_current"
#define IVT_S_31012025_IVT_MSG_RESPONSE__80_RESP_MEAS_ERROR_COUNT_MASK_NAME "_80_Resp_MeasError_Count_Mask"
#define IVT_S_31012025_IVT_MSG_RESPONSE__81_RESP_SYSTEM_ERROR_COUNT_MASK_NAME "_81_Resp_SystemError_Count_Mask"
#define IVT_S_31012025_IVT_MSG_RESPONSE__82_RESP_ALL_LOG_DATA_COUNTER_NAME "_82_Resp_AllLogData_Counter"
#define IVT_S_31012025_IVT_MSG_RESPONSE__83_RESP_LOG_DATA_COUNTER_NAME "_83_Resp_LogData_Counter"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A0_RESP_CYCLE_TIME_I_NAME "_A0_Resp_CycleTime_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A1_RESP_CYCLE_TIME_U1_NAME "_A1_Resp_CycleTime_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A2_RESP_CYCLE_TIME_U2_NAME "_A2_Resp_CycleTime_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A3_RESP_CYCLE_TIME_U3_NAME "_A3_Resp_CycleTime_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A4_RESP_CYCLE_TIME_T_NAME "_A4_Resp_CycleTime_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A5_RESP_CYCLE_TIME_W_NAME "_A5_Resp_CycleTime_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A6_RESP_CYCLE_TIME_AS_NAME "_A6_Resp_CycleTime_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__A7_RESP_CYCLE_TIME_WH_NAME "_A7_Resp_CycleTime_WH"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_06_TRIGGER_AS_NAME "_B1_06_Trigger_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_05_TRIGGER_W_NAME "_B1_05_Trigger_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_04_TRIGGER_T_NAME "_B1_04_Trigger_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_03_TRIGGER_U3_NAME "_B1_03_Trigger_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_02_TRIGGER_U2_NAME "_B1_02_Trigger_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_01_TRIGGER_U1_NAME "_B1_01_Trigger_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B1_00_TRIGGER_I_NAME "_B1_00_Trigger_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_STARTUP_MODE_NAME "_B4_Resp_Startup_Mode"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BF_RESTART_ALIVE_SN_NAME "_BF_Restart_Alive_SN"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_REVISION_NAME "_BA_Resp_SW_Ver_Revision"
#define IVT_S_31012025_IVT_MSG_RESPONSE__90_RESP_CAN_ID_SN_I_NAME "_90_Resp_Can_ID_SN_I"
#define IVT_S_31012025_IVT_MSG_RESPONSE__91_RESP_CAN_ID_SN_U1_NAME "_91_Resp_Can_ID_SN_U1"
#define IVT_S_31012025_IVT_MSG_RESPONSE__92_RESP_CAN_ID_SN_U2_NAME "_92_Resp_Can_ID_SN_U2"
#define IVT_S_31012025_IVT_MSG_RESPONSE__93_RESP_CAN_ID_SN_U3_NAME "_93_Resp_Can_ID_SN_U3"
#define IVT_S_31012025_IVT_MSG_RESPONSE__94_RESP_CAN_ID_SN_T_NAME "_94_Resp_Can_ID_SN_T"
#define IVT_S_31012025_IVT_MSG_RESPONSE__95_RESP_CAN_ID_SN_W_NAME "_95_Resp_Can_ID_SN_W"
#define IVT_S_31012025_IVT_MSG_RESPONSE__96_RESP_CAN_ID_SN_AS_NAME "_96_Resp_Can_ID_SN_As"
#define IVT_S_31012025_IVT_MSG_RESPONSE__97_RESP_CAN_ID_SN_WH_NAME "_97_Resp_Can_ID_SN_Wh"
#define IVT_S_31012025_IVT_MSG_RESPONSE__9_D_RESP_CAN_ID_SN_COMMAND_NAME "_9D_Resp_Can_ID_SN_Command"
#define IVT_S_31012025_IVT_MSG_RESPONSE__9_F_RESP_CAN_ID_SN_RESPONSE_NAME "_9F_Resp_Can_ID_SN_Response"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B0_RESP_RESET_DEVICE_SN_NAME "_B0_Resp_Reset_Device_SN"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B4_RESP_CODE_LEVEL_NAME "_B4_Resp_Code_Level"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B5_RESP_OC_POS_RESET_THRESHOLD_NAME "_B5_Resp_OC_Pos_Reset_Threshold"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B6_RESP_OC_NEG_RESET_THRESHOLD_NAME "_B6_Resp_OC_Neg_Reset_Threshold"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_VOLTAGE_CHAN_NAME "_B9_Resp_Device_Voltage_chan"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_VEAR_NAME "_BA_Resp_SW_Ver_Vear"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TOI_NAME "_B9_Resp_Device_TOI"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_MONTH_NAME "_BA_Resp_SW_Ver_Month"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_NAME "_B9_Resp_Device_Com"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_DAY_NAME "_BA_Resp_SW_Ver_Day"
#define IVT_S_31012025_IVT_MSG_RESPONSE__B9_RESP_DEVICE_V_SUPPLY_NAME "_B9_Resp_Device_V_supply"
#define IVT_S_31012025_IVT_MSG_RESPONSE__BA_RESP_SW_VER_INTERNAL_NAME "_BA_Resp_SW_Ver_Internal"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_ID_RESULT_T_NAME "IVT_ID_Result_T"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_RESULT_T_SYSTEM_ERROR_NAME "IVT_Result_T_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_RESULT_T_MEASUREMENT_ERROR_NAME "IVT_Result_T_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_RESULT_T_CHANNEL_ERROR_NAME "IVT_Result_T_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_RESULT_T_OCS_NAME "IVT_Result_T_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_MSG_COUNT_RESULT_T_NAME "IVT_MsgCount_Result_T"
#define IVT_S_31012025_IVT_MSG_RESULT_T_IVT_RESULT_T_NAME "IVT_Result_T"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_ID_RESULT_U3_NAME "IVT_ID_Result_U3"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_RESULT_U3_SYSTEM_ERROR_NAME "IVT_Result_U3_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_RESULT_U3_MEASUREMENT_ERROR_NAME "IVT_Result_U3_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_RESULT_U3_CHANNEL_ERROR_NAME "IVT_Result_U3_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_RESULT_U3_OCS_NAME "IVT_Result_U3_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_MSG_COUNT_RESULT_U3_NAME "IVT_MsgCount_Result_U3"
#define IVT_S_31012025_IVT_MSG_RESULT_U3_IVT_RESULT_U3_NAME "IVT_Result_U3"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_ID_RESULT_U2_NAME "IVT_ID_Result_U2"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_RESULT_U2_SYSTEM_ERROR_NAME "IVT_Result_U2_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_RESULT_U2_MEASUREMENT_ERROR_NAME "IVT_Result_U2_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_RESULT_U2_CHANNEL_ERROR_NAME "IVT_Result_U2_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_RESULT_U2_OCS_NAME "IVT_Result_U2_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_MSG_COUNT_RESULT_U2_NAME "IVT_MsgCount_Result_U2"
#define IVT_S_31012025_IVT_MSG_RESULT_U2_IVT_RESULT_U2_NAME "IVT_Result_U2"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_ID_RESULT_U1_NAME "IVT_ID_Result_U1"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_RESULT_U1_SYSTEM_ERROR_NAME "IVT_Result_U1_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_RESULT_U1_MEASUREMENT_ERROR_NAME "IVT_Result_U1_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_RESULT_U1_CHANNEL_ERROR_NAME "IVT_Result_U1_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_RESULT_U1_OCS_NAME "IVT_Result_U1_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_MSG_COUNT_RESULT_U1_NAME "IVT_MsgCount_Result_U1"
#define IVT_S_31012025_IVT_MSG_RESULT_U1_IVT_RESULT_U1_NAME "IVT_Result_U1"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_ID_RESULT_I_NAME "IVT_ID_Result_I"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_RESULT_I_SYSTEM_ERROR_NAME "IVT_Result_I_System_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_RESULT_I_MEASUREMENT_ERROR_NAME "IVT_Result_I_Measurement_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_RESULT_I_CHANNEL_ERROR_NAME "IVT_Result_I_Channel_Error"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_RESULT_I_OCS_NAME "IVT_Result_I_OCS"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_MSG_COUNT_RESULT_I_NAME "IVT_MsgCount_Result_I"
#define IVT_S_31012025_IVT_MSG_RESULT_I_IVT_RESULT_I_NAME "IVT_Result_I"
#define IVT_S_31012025_IVT_MSG_CMD_IVT_ID_CMD_NAME "IVT_ID_Cmd"
#define IVT_S_31012025_IVT_MSG_CMD__31_TRIGGER_SPARE_NAME "_31_Trigger_spare"
#define IVT_S_31012025_IVT_MSG_CMD__10_SET_CAN_ID_VAL_I_NAME "_10_Set_Can_ID_val_I"
#define IVT_S_31012025_IVT_MSG_CMD__11_SET_CAN_ID_VAL_U1_NAME "_11_Set_Can_ID_val_U1"
#define IVT_S_31012025_IVT_MSG_CMD__12_SET_CAN_ID_VAL_U2_NAME "_12_Set_Can_ID_val_U2"
#define IVT_S_31012025_IVT_MSG_CMD__13_SET_CAN_ID_VAL_U3_NAME "_13_Set_Can_ID_val_U3"
#define IVT_S_31012025_IVT_MSG_CMD__14_SET_CAN_ID_VAL_T_NAME "_14_Set_Can_ID_val_T"
#define IVT_S_31012025_IVT_MSG_CMD__15_SET_CAN_ID_VAL_W_NAME "_15_Set_Can_ID_val_W"
#define IVT_S_31012025_IVT_MSG_CMD__16_SET_CAN_ID_VAL_AS_NAME "_16_Set_Can_ID_val_As"
#define IVT_S_31012025_IVT_MSG_CMD__17_SET_CAN_ID_VAL_WH_NAME "_17_Set_Can_ID_val_Wh"
#define IVT_S_31012025_IVT_MSG_CMD__1_D_SET_CAN_ID_VAL_COMMAND_NAME "_1D_Set_Can_ID_val_Command"
#define IVT_S_31012025_IVT_MSG_CMD__1_F_SET_CAN_ID_VAL_RESPONSE_NAME "_1F_Set_Can_ID_val_Response"
#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_SIGN_I_NAME "_20_Conf_Sign_I"
#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_SIGN_U1_NAME "_21_Conf_Sign_U1"
#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_SIGN_U2_NAME "_22_Conf_Sign_U2"
#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_SIGN_U3_NAME "_23_Conf_Sign_U3"
#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_SIGN_T_NAME "_24_Conf_Sign_T"
#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_SIGN_W_NAME "_25_Conf_Sign_W"
#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_SIGN_AS_NAME "_26_Conf_Sign_As"
#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_SIGN_WH_NAME "_27_Conf_Sign_WH"
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_ITEM_NAME "_30_Reset_Item"
#define IVT_S_31012025_IVT_MSG_CMD__32_STORE_DUMMY_NAME "_32_Store_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__33_OC_TEST_TIME_NAME "_33_Oc_Test_Time"
#define IVT_S_31012025_IVT_MSG_CMD__35_OC_POS_SET_THRESHOLD_NAME "_35_OC_Pos_Set_Threshold"
#define IVT_S_31012025_IVT_MSG_CMD__36_OC_NEG_SET_THRESHOLD_NAME "_36_OC_Neg_Set_Threshold"
#define IVT_S_31012025_IVT_MSG_CMD__3_A_RESTART_TO_BITRATE_NAME "_3A_RESTART_to_Bitrate"
#define IVT_S_31012025_IVT_MSG_CMD__3_D_RESTART_DEFAULT_DUMMY_NAME "_3D_Restart_Default_Dummy"
#define IVT_S_31012025_IVT_MSG_CMD__3_F_RESTART_DUMMY_NAME "_3F_Restart_Dummy"
#define IVT_S_31012025_IVT_MSG_CMD__40_GET_MEAS_ERROR_ITEM_NAME "_40_Get_MeasError_Item"
#define IVT_S_31012025_IVT_MSG_CMD__41_GET_SYSTEM_ERROR_ITEM_NAME "_41_Get_SystemError_Item"
#define IVT_S_31012025_IVT_MSG_CMD__42_GET_ALL_LOG_DATA_ITEM_NAME "_42_Get_AllLogData_Item"
#define IVT_S_31012025_IVT_MSG_CMD__43_GET_LOG_DATA_ITEM_NAME "_43_Get_LogData_Item"
#define IVT_S_31012025_IVT_MSG_CMD__60_GET_RESULT_DUMMY_I_NAME "_60_Get_Result_dummy_I"
#define IVT_S_31012025_IVT_MSG_CMD__61_GET_RESULT_DUMMY_U1_NAME "_61_Get_Result_dummy_U1"
#define IVT_S_31012025_IVT_MSG_CMD__62_GET_RESULT_DUMMY_U2_NAME "_62_Get_Result_dummy_U2"
#define IVT_S_31012025_IVT_MSG_CMD__63_GET_RESULT_DUMMY_U3_NAME "_63_Get_Result_dummy_U3"
#define IVT_S_31012025_IVT_MSG_CMD__64_GET_RESULT_DUMMY_T_NAME "_64_Get_Result_dummy_T"
#define IVT_S_31012025_IVT_MSG_CMD__65_GET_RESULT_DUMMY_W_NAME "_65_Get_Result_dummy_W"
#define IVT_S_31012025_IVT_MSG_CMD__66_GET_RESULT_DUMMY_AS_NAME "_66_Get_Result_dummy_As"
#define IVT_S_31012025_IVT_MSG_CMD__67_GET_RESULT_DUMMY_WH_NAME "_67_Get_Result_dummy_Wh"
#define IVT_S_31012025_IVT_MSG_CMD__73_GET_OC_TEST_DUMMY_NAME "_73_Get_OC_Test_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__74_GET_MODE_DUMMY_NAME "_74_Get_Mode_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__75_GET_OC_POS_DUMMY_NAME "_75_Get_OC_Pos_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__76_GET_OC_NEG_DUMMY_NAME "_76_Get_OC_Neg_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__79_GET_DEVICE_ID_DUMMY_NAME "_79_Get_Device_Id_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__7_A_GET_SW_VERSION_DUMMY_NAME "_7A_Get_SW_Version_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__7_B_GET_SERIEN_NR_DUMMY_NAME "_7B_Get_Serien_Nr_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__7_C_GET_ART_NR_DUMMY_NAME "_7C_Get_Art_Nr_dummy"
#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_ENDIANESS_I_NAME "_20_Conf_Endianess_I"
#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_ENDIANESS_U1_NAME "_21_Conf_Endianess_U1"
#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_ENDIANESS_U2_NAME "_22_Conf_Endianess_U2"
#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_ENDIANESS_U3_NAME "_23_Conf_Endianess_U3"
#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_ENDIANESS_T_NAME "_24_Conf_Endianess_T"
#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_ENDIANESS_W_NAME "_25_Conf_Endianess_W"
#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_ENDIANESS_AS_NAME "_26_Conf_Endianess_As"
#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_ENDIANESS_WH_NAME "_27_Conf_Endianess_WH"
#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_TRIGGER_MODE_I_NAME "_20_Conf_TriggerMode_I"
#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_TRIGGER_MODE_U1_NAME "_21_Conf_TriggerMode_U1"
#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_TRIGGER_MODE_U2_NAME "_22_Conf_TriggerMode_U2"
#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_TRIGGER_MODE_U3_NAME "_23_Conf_TriggerMode_U3"
#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_TRIGGER_MODE_T_NAME "_24_Conf_TriggerMode_T"
#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_TRIGGER_MODE_W_NAME "_25_Conf_TriggerMode_W"
#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_TRIGGER_MODE_AS_NAME "_26_Conf_TriggerMode_As"
#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_TRIGGER_MODE_WH_NAME "_27_Conf_TriggerMode_WH"
#define IVT_S_31012025_IVT_MSG_CMD__34_ACTUAL_MODE_NAME "_34_Actual_Mode"
#define IVT_S_31012025_IVT_MSG_CMD__31_07_TRIGGER_WH_NAME "_31_07_Trigger_WH"
#define IVT_S_31012025_IVT_MSG_CMD__20_CONF_CYCLE_TIME_I_NAME "_20_Conf_CycleTime_I"
#define IVT_S_31012025_IVT_MSG_CMD__21_CONF_CYCLE_TIME_U1_NAME "_21_Conf_CycleTime_U1"
#define IVT_S_31012025_IVT_MSG_CMD__22_CONF_CYCLE_TIME_U2_NAME "_22_Conf_CycleTime_U2"
#define IVT_S_31012025_IVT_MSG_CMD__23_CONF_CYCLE_TIME_U3_NAME "_23_Conf_CycleTime_U3"
#define IVT_S_31012025_IVT_MSG_CMD__24_CONF_CYCLE_TIME_T_NAME "_24_Conf_CycleTime_T"
#define IVT_S_31012025_IVT_MSG_CMD__25_CONF_CYCLE_TIME_W_NAME "_25_Conf_CycleTime_W"
#define IVT_S_31012025_IVT_MSG_CMD__26_CONF_CYCLE_TIME_AS_NAME "_26_Conf_CycleTime_As"
#define IVT_S_31012025_IVT_MSG_CMD__27_CONF_CYCLE_TIME_WH_NAME "_27_Conf_CycleTime_WH"
#define IVT_S_31012025_IVT_MSG_CMD__31_06_TRIGGER_AS_NAME "_31_06_Trigger_As"
#define IVT_S_31012025_IVT_MSG_CMD__31_05_TRIGGER_W_NAME "_31_05_Trigger_W"
#define IVT_S_31012025_IVT_MSG_CMD__31_04_TRIGGER_T_NAME "_31_04_Trigger_T"
#define IVT_S_31012025_IVT_MSG_CMD__31_03_TRIGGER_U3_NAME "_31_03_Trigger_U3"
#define IVT_S_31012025_IVT_MSG_CMD__31_02_TRIGGER_U2_NAME "_31_02_Trigger_U2"
#define IVT_S_31012025_IVT_MSG_CMD__31_01_TRIGGER_U1_NAME "_31_01_Trigger_U1"
#define IVT_S_31012025_IVT_MSG_CMD__31_00_TRIGGER_I_NAME "_31_00_Trigger_I"
#define IVT_S_31012025_IVT_MSG_CMD__34_STARTUP_MODE_NAME "_34_Startup_Mode"
#define IVT_S_31012025_IVT_MSG_CMD__10_SET_CAN_ID_SN_I_NAME "_10_Set_Can_ID_SN_I"
#define IVT_S_31012025_IVT_MSG_CMD__11_SET_CAN_ID_SN_U1_NAME "_11_Set_Can_ID_SN_U1"
#define IVT_S_31012025_IVT_MSG_CMD__12_SET_CAN_ID_SN_U2_NAME "_12_Set_Can_ID_SN_U2"
#define IVT_S_31012025_IVT_MSG_CMD__13_SET_CAN_ID_SN_U3_NAME "_13_Set_Can_ID_SN_U3"
#define IVT_S_31012025_IVT_MSG_CMD__14_SET_CAN_ID_SN_T_NAME "_14_Set_Can_ID_SN_T"
#define IVT_S_31012025_IVT_MSG_CMD__15_SET_CAN_ID_SN_W_NAME "_15_Set_Can_ID_SN_W"
#define IVT_S_31012025_IVT_MSG_CMD__16_SET_CAN_ID_SN_AS_NAME "_16_Set_Can_ID_SN_As"
#define IVT_S_31012025_IVT_MSG_CMD__17_SET_CAN_ID_SN_WH_NAME "_17_Set_Can_ID_SN_Wh"
#define IVT_S_31012025_IVT_MSG_CMD__1_D_SET_CAN_ID_SN_COMMAND_NAME "_1D_Set_Can_ID_SN_Command"
#define IVT_S_31012025_IVT_MSG_CMD__1_F_SET_CAN_ID_SN_RESPONSE_NAME "_1F_Set_Can_ID_SN_Response"
#define IVT_S_31012025_IVT_MSG_CMD__30_RESET_DEVICE_SN_NAME "_30_Reset_Device_SN"
#define IVT_S_31012025_IVT_MSG_CMD__34_CODE_LEVEL_NAME "_34_Code_Level"
#define IVT_S_31012025_IVT_MSG_CMD__35_OC_POS_RESET_THRESHOLD_NAME "_35_OC_Pos_Reset_Threshold"
#define IVT_S_31012025_IVT_MSG_CMD__36_OC_NEG_RESET_THRESHOLD_NAME "_36_OC_Neg_Reset_Threshold"
#define IVT_S_31012025_IVT_MSG_CMD__50_GET_CAN_ID_SN_I_NAME "_50_Get_Can_ID_SN_I"
#define IVT_S_31012025_IVT_MSG_CMD__51_GET_CAN_ID_SN_U1_NAME "_51_Get_Can_ID_SN_U1"
#define IVT_S_31012025_IVT_MSG_CMD__52_GET_CAN_ID_SN_U2_NAME "_52_Get_Can_ID_SN_U2"
#define IVT_S_31012025_IVT_MSG_CMD__53_GET_CAN_ID_SN_U3_NAME "_53_Get_Can_ID_SN_U3"
#define IVT_S_31012025_IVT_MSG_CMD__54_GET_CAN_ID_SN_T_NAME "_54_Get_Can_ID_SN_T"
#define IVT_S_31012025_IVT_MSG_CMD__55_GET_CAN_ID_SN_W_NAME "_55_Get_Can_ID_SN_W"
#define IVT_S_31012025_IVT_MSG_CMD__56_GET_CAN_ID_SN_AS_NAME "_56_Get_Can_ID_SN_As"
#define IVT_S_31012025_IVT_MSG_CMD__57_GET_CAN_ID_SN_WH_NAME "_57_Get_Can_ID_SN_Wh"
#define IVT_S_31012025_IVT_MSG_CMD__5_D_GET_CAN_ID_SN_COMMAND_NAME "_5D_Get_Can_ID_SN_Command"
#define IVT_S_31012025_IVT_MSG_CMD__5_F_GET_CAN_ID_SN_RESPONSE_NAME "_5F_Get_Can_ID_SN_Response"

/**
 * Signals in message IVT_Msg_Result_Wh.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_wh_t {
    /**
     * Range: 7..7 (7..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_wh;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 Wh)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_wh;
};

/**
 * Signals in message IVT_Msg_Result_As.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_as_t {
    /**
     * Range: 6..6 (6..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_as;

    /**
     * Range: -21474836478..2147483647 (-21474836478..2147483647 As)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_as;
};

/**
 * Signals in message IVT_Msg_Result_W.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_w_t {
    /**
     * Range: 5..5 (5..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_w;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 W)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_w;
};

/**
 * Signals in message IVT_Msg_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_trigger_spare;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ff_wrong_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _bf_restart_alive_cmd_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _80_resp_meas_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _81_resp_system_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _82_resp_all_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _83_resp_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _90_resp_can_id_val_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _91_resp_can_id_val_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _92_resp_can_id_val_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _93_resp_can_id_val_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _94_resp_can_id_val_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _95_resp_can_id_val_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _96_resp_can_id_val_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _97_resp_can_id_val_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9_d_resp_can_id_val_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9_f_resp_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_sign_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_sign_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_sign_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_sign_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_sign_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_sign_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_sign_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_sign_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b0_resp_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b2_resp_store_dummy;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b3_resp_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_major_hw;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bb_resp_serien_nr;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _bc_resp_art_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_endianess_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_endianess_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_endianess_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_endianess_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_endianess_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_endianess_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_endianess_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_endianess_wh;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_trigger_mode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_trigger_mode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_trigger_mode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_trigger_mode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_trigger_mode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_trigger_mode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_trigger_mode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_trigger_mode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b4_resp_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_07_trigger_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b2_resp_store_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b9_resp_device_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _80_resp_meas_error_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _81_resp_system_error_count_mask;

    /**
     * Range: -140737488355328..140737488355327 (-140737488355328..140737488355327 -)
     * Scale: 1
     * Offset: 0
     */
    int64_t _82_resp_all_log_data_counter;

    /**
     * Range: -140737488355328..140737488355327 (-140737488355328..140737488355327 -)
     * Scale: 1
     * Offset: 0
     */
    int64_t _83_resp_log_data_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a0_resp_cycle_time_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a1_resp_cycle_time_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a2_resp_cycle_time_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a3_resp_cycle_time_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a4_resp_cycle_time_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a5_resp_cycle_time_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a6_resp_cycle_time_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a7_resp_cycle_time_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_06_trigger_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_05_trigger_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_04_trigger_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_03_trigger_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_02_trigger_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_01_trigger_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_00_trigger_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b4_resp_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bf_restart_alive_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_revision;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _90_resp_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _91_resp_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _92_resp_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _93_resp_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _94_resp_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _95_resp_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _96_resp_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _97_resp_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9_d_resp_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9_f_resp_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b0_resp_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b4_resp_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_voltage_chan;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_vear;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_toi;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t _ba_resp_sw_ver_month;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_com;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_day;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_v_supply;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_internal;
};

/**
 * Signals in message IVT_Msg_Result_T.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_t_t {
    /**
     * Range: 4..4 (4..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_t;

    /**
     * Range: -21474836480..21474836470 (-2147483648..2147483647 °C)
     * Scale: 0.1
     * Offset: 0
     */
    int32_t ivt_result_t;
};

/**
 * Signals in message IVT_Msg_Result_U3.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_u3_t {
    /**
     * Range: 3..3 (3..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_u3;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u3;
};

/**
 * Signals in message IVT_Msg_Result_U2.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_u2_t {
    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_u2;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u2;
};

/**
 * Signals in message IVT_Msg_Result_U1.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_u1_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_u1;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u1;
};

/**
 * Signals in message IVT_Msg_Result_I.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_result_i_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_i;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mA)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_i;
};

/**
 * Signals in message IVT_Msg_Cmd.
 *
 * All signal values are as on the CAN bus.
 */
struct ivt_s_31012025_ivt_msg_cmd_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_cmd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_trigger_spare;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _10_set_can_id_val_i;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _11_set_can_id_val_u1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _12_set_can_id_val_u2;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _13_set_can_id_val_u3;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _14_set_can_id_val_t;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _15_set_can_id_val_w;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _16_set_can_id_val_as;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _17_set_can_id_val_wh;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1_d_set_can_id_val_command;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1_f_set_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_sign_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_sign_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_sign_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_sign_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_sign_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_sign_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_sign_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_sign_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _30_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _32_store_dummy;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _33_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3_a_restart_to_bitrate;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3_d_restart_default_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3_f_restart_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _40_get_meas_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _41_get_system_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _42_get_all_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _43_get_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _60_get_result_dummy_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _61_get_result_dummy_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _62_get_result_dummy_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _63_get_result_dummy_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _64_get_result_dummy_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _65_get_result_dummy_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _66_get_result_dummy_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _67_get_result_dummy_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _73_get_oc_test_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _74_get_mode_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _75_get_oc_pos_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _76_get_oc_neg_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _79_get_device_id_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7_a_get_sw_version_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7_b_get_serien_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7_c_get_art_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_endianess_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_endianess_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_endianess_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_endianess_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_endianess_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_endianess_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_endianess_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_endianess_wh;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_trigger_mode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_trigger_mode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_trigger_mode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_trigger_mode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_trigger_mode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_trigger_mode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_trigger_mode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_trigger_mode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _34_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_07_trigger_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _20_conf_cycle_time_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _21_conf_cycle_time_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _22_conf_cycle_time_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _23_conf_cycle_time_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _24_conf_cycle_time_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _25_conf_cycle_time_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _26_conf_cycle_time_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _27_conf_cycle_time_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_06_trigger_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_05_trigger_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_04_trigger_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_03_trigger_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_02_trigger_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_01_trigger_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_00_trigger_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _34_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _10_set_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _11_set_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _12_set_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _13_set_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _14_set_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _15_set_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _16_set_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _17_set_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1_d_set_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1_f_set_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _30_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _34_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _50_get_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _51_get_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _52_get_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _53_get_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _54_get_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _55_get_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _56_get_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _57_get_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5_d_get_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5_f_get_can_id_sn_response;
};

/**
 * Pack message IVT_Msg_Result_Wh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_wh_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_wh_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_Wh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_wh_unpack(
    struct ivt_s_31012025_ivt_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_Wh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_wh_init(struct ivt_s_31012025_ivt_msg_result_wh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_wh_ivt_id_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_id_result_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_id_result_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_wh_ivt_msg_count_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_msg_count_result_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_msg_count_result_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_wh_ivt_result_wh_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_As.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_as_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_as_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_As.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_as_unpack(
    struct ivt_s_31012025_ivt_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_As.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_as_init(struct ivt_s_31012025_ivt_msg_result_as_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_as_ivt_id_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_id_result_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_id_result_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_as_ivt_result_as_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_result_as_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_result_as_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_as_ivt_result_as_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_result_as_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_result_as_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_as_ivt_result_as_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_result_as_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_result_as_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_as_ivt_result_as_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_result_as_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_result_as_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_as_ivt_msg_count_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_msg_count_result_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_msg_count_result_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_as_ivt_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_as_ivt_result_as_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_as_ivt_result_as_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_W.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_w_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_w_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_W.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_w_unpack(
    struct ivt_s_31012025_ivt_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_W.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_w_init(struct ivt_s_31012025_ivt_msg_result_w_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_w_ivt_id_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_id_result_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_id_result_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_w_ivt_result_w_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_result_w_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_result_w_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_w_ivt_result_w_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_result_w_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_result_w_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_w_ivt_result_w_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_result_w_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_result_w_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_w_ivt_result_w_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_result_w_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_result_w_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_w_ivt_msg_count_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_msg_count_result_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_msg_count_result_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_w_ivt_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_w_ivt_result_w_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_w_ivt_result_w_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_response_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_response_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_response_unpack(
    struct ivt_s_31012025_ivt_msg_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Response.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_response_init(struct ivt_s_31012025_ivt_msg_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response_ivt_id_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response_ivt_id_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response_ivt_id_response_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_trigger_spare_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_trigger_spare_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_trigger_spare_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ff_wrong_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ff_wrong_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ff_wrong_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__bf_restart_alive_cmd_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__bf_restart_alive_cmd_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__bf_restart_alive_cmd_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__80_resp_meas_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__80_resp_meas_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__80_resp_meas_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__81_resp_system_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__81_resp_system_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__81_resp_system_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__82_resp_all_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__82_resp_all_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__82_resp_all_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__83_resp_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__83_resp_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__83_resp_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__90_resp_can_id_val_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__90_resp_can_id_val_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__90_resp_can_id_val_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__91_resp_can_id_val_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__91_resp_can_id_val_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__91_resp_can_id_val_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__92_resp_can_id_val_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__92_resp_can_id_val_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__92_resp_can_id_val_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__93_resp_can_id_val_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__93_resp_can_id_val_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__93_resp_can_id_val_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__94_resp_can_id_val_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__94_resp_can_id_val_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__94_resp_can_id_val_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__95_resp_can_id_val_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__95_resp_can_id_val_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__95_resp_can_id_val_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__96_resp_can_id_val_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__96_resp_can_id_val_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__96_resp_can_id_val_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__97_resp_can_id_val_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__97_resp_can_id_val_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__97_resp_can_id_val_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__9_d_resp_can_id_val_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__9_d_resp_can_id_val_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__9_d_resp_can_id_val_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__9_f_resp_can_id_val_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__9_f_resp_can_id_val_response_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__9_f_resp_can_id_val_response_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a0_resp_sign_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a0_resp_sign_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a0_resp_sign_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a1_resp_sign_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a1_resp_sign_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a1_resp_sign_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a2_resp_sign_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a2_resp_sign_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a2_resp_sign_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a3_resp_sign_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a3_resp_sign_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a3_resp_sign_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a4_resp_sign_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a4_resp_sign_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a4_resp_sign_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a5_resp_sign_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a5_resp_sign_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a5_resp_sign_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a6_resp_sign_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a6_resp_sign_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a6_resp_sign_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a7_resp_sign_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a7_resp_sign_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a7_resp_sign_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__b0_resp_reset_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b0_resp_reset_item_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b0_resp_reset_item_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b2_resp_store_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b2_resp_store_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b2_resp_store_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__b3_resp_oc_test_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b3_resp_oc_test_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b3_resp_oc_test_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_response__b5_resp_oc_pos_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b5_resp_oc_pos_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b5_resp_oc_pos_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_response__b6_resp_oc_neg_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b6_resp_oc_neg_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b6_resp_oc_neg_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b9_resp_device_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b9_resp_device_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b9_resp_device_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_major_hw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_major_hw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_major_hw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__bb_resp_serien_nr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__bb_resp_serien_nr_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__bb_resp_serien_nr_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t ivt_s_31012025_ivt_msg_response__bc_resp_art_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__bc_resp_art_n_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__bc_resp_art_n_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a0_resp_endianess_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a0_resp_endianess_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a0_resp_endianess_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a1_resp_endianess_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a1_resp_endianess_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a1_resp_endianess_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a2_resp_endianess_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a2_resp_endianess_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a2_resp_endianess_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a3_resp_endianess_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a3_resp_endianess_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a3_resp_endianess_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a4_resp_endianess_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a4_resp_endianess_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a4_resp_endianess_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a5_resp_endianess_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a5_resp_endianess_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a5_resp_endianess_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a6_resp_endianess_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a6_resp_endianess_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a6_resp_endianess_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a7_resp_endianess_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a7_resp_endianess_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a7_resp_endianess_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a0_resp_trigger_mode_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a0_resp_trigger_mode_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a0_resp_trigger_mode_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a1_resp_trigger_mode_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a1_resp_trigger_mode_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a1_resp_trigger_mode_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a2_resp_trigger_mode_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a2_resp_trigger_mode_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a2_resp_trigger_mode_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a3_resp_trigger_mode_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a3_resp_trigger_mode_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a3_resp_trigger_mode_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a4_resp_trigger_mode_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a4_resp_trigger_mode_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a4_resp_trigger_mode_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a5_resp_trigger_mode_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a5_resp_trigger_mode_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a5_resp_trigger_mode_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a6_resp_trigger_mode_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a6_resp_trigger_mode_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a6_resp_trigger_mode_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__a7_resp_trigger_mode_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a7_resp_trigger_mode_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a7_resp_trigger_mode_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b4_resp_actual_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b4_resp_actual_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b4_resp_actual_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_07_trigger_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_07_trigger_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_07_trigger_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__b2_resp_store_device_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b2_resp_store_device_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b2_resp_store_device_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__b9_resp_device_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b9_resp_device_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b9_resp_device_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__80_resp_meas_error_count_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__80_resp_meas_error_count_mask_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__80_resp_meas_error_count_mask_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__81_resp_system_error_count_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__81_resp_system_error_count_mask_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__81_resp_system_error_count_mask_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ivt_s_31012025_ivt_msg_response__82_resp_all_log_data_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__82_resp_all_log_data_counter_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__82_resp_all_log_data_counter_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ivt_s_31012025_ivt_msg_response__83_resp_log_data_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__83_resp_log_data_counter_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__83_resp_log_data_counter_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a0_resp_cycle_time_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a0_resp_cycle_time_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a0_resp_cycle_time_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a1_resp_cycle_time_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a1_resp_cycle_time_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a1_resp_cycle_time_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a2_resp_cycle_time_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a2_resp_cycle_time_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a2_resp_cycle_time_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a3_resp_cycle_time_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a3_resp_cycle_time_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a3_resp_cycle_time_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a4_resp_cycle_time_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a4_resp_cycle_time_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a4_resp_cycle_time_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a5_resp_cycle_time_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a5_resp_cycle_time_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a5_resp_cycle_time_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a6_resp_cycle_time_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a6_resp_cycle_time_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a6_resp_cycle_time_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__a7_resp_cycle_time_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__a7_resp_cycle_time_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__a7_resp_cycle_time_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_06_trigger_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_06_trigger_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_06_trigger_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_05_trigger_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_05_trigger_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_05_trigger_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_04_trigger_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_04_trigger_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_04_trigger_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_03_trigger_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_03_trigger_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_03_trigger_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_02_trigger_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_02_trigger_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_02_trigger_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_01_trigger_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_01_trigger_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_01_trigger_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b1_00_trigger_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b1_00_trigger_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b1_00_trigger_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b4_resp_startup_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b4_resp_startup_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b4_resp_startup_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__bf_restart_alive_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__bf_restart_alive_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__bf_restart_alive_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__90_resp_can_id_sn_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__90_resp_can_id_sn_i_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__90_resp_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__91_resp_can_id_sn_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__91_resp_can_id_sn_u1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__91_resp_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__92_resp_can_id_sn_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__92_resp_can_id_sn_u2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__92_resp_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__93_resp_can_id_sn_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__93_resp_can_id_sn_u3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__93_resp_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__94_resp_can_id_sn_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__94_resp_can_id_sn_t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__94_resp_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__95_resp_can_id_sn_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__95_resp_can_id_sn_w_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__95_resp_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__96_resp_can_id_sn_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__96_resp_can_id_sn_as_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__96_resp_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__97_resp_can_id_sn_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__97_resp_can_id_sn_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__97_resp_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__9_d_resp_can_id_sn_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__9_d_resp_can_id_sn_command_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__9_d_resp_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__9_f_resp_can_id_sn_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__9_f_resp_can_id_sn_response_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__9_f_resp_can_id_sn_response_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_response__b0_resp_reset_device_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b0_resp_reset_device_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b0_resp_reset_device_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_response__b4_resp_code_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b4_resp_code_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b4_resp_code_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_response__b5_resp_oc_pos_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b5_resp_oc_pos_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b5_resp_oc_pos_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_response__b6_resp_oc_neg_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b6_resp_oc_neg_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b6_resp_oc_neg_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b9_resp_device_voltage_chan_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b9_resp_device_voltage_chan_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b9_resp_device_voltage_chan_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_vear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_vear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_vear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b9_resp_device_toi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b9_resp_device_toi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b9_resp_device_toi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_month_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_month_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b9_resp_device_com_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b9_resp_device_com_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b9_resp_device_com_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__b9_resp_device_v_supply_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__b9_resp_device_v_supply_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__b9_resp_device_v_supply_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_internal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_internal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_response__ba_resp_sw_ver_internal_is_in_range(uint8_t value);

/**
 * Pack message IVT_Msg_Result_T.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_t_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_t_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_T.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_t_unpack(
    struct ivt_s_31012025_ivt_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_T.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_t_init(struct ivt_s_31012025_ivt_msg_result_t_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_t_ivt_id_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_id_result_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_id_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_t_ivt_result_t_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_result_t_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_result_t_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_t_ivt_result_t_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_result_t_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_result_t_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_t_ivt_result_t_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_result_t_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_result_t_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_t_ivt_result_t_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_result_t_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_result_t_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_t_ivt_msg_count_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_msg_count_result_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_msg_count_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_t_ivt_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_t_ivt_result_t_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_t_ivt_result_t_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_U3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_u3_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_u3_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_U3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_u3_unpack(
    struct ivt_s_31012025_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_U3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_u3_init(struct ivt_s_31012025_ivt_msg_result_u3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u3_ivt_id_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_id_result_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_id_result_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u3_ivt_msg_count_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_msg_count_result_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_msg_count_result_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u3_ivt_result_u3_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_U2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_u2_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_u2_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_U2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_u2_unpack(
    struct ivt_s_31012025_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_U2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_u2_init(struct ivt_s_31012025_ivt_msg_result_u2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u2_ivt_id_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_id_result_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_id_result_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u2_ivt_msg_count_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_msg_count_result_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_msg_count_result_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u2_ivt_result_u2_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_U1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_u1_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_u1_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_U1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_u1_unpack(
    struct ivt_s_31012025_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_U1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_u1_init(struct ivt_s_31012025_ivt_msg_result_u1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u1_ivt_id_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_id_result_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_id_result_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_u1_ivt_msg_count_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_msg_count_result_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_msg_count_result_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_u1_ivt_result_u1_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_I.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_i_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_result_i_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_I.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_result_i_unpack(
    struct ivt_s_31012025_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Result_I.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_result_i_init(struct ivt_s_31012025_ivt_msg_result_i_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_i_ivt_id_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_id_result_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_id_result_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_i_ivt_result_i_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_result_i_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_result_i_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_i_ivt_result_i_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_result_i_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_result_i_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_i_ivt_result_i_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_result_i_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_result_i_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_i_ivt_result_i_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_result_i_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_result_i_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_result_i_ivt_msg_count_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_msg_count_result_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_msg_count_result_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ivt_s_31012025_ivt_msg_result_i_ivt_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_result_i_ivt_result_i_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_result_i_ivt_result_i_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Cmd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ivt_s_31012025_ivt_msg_cmd_pack(
    uint8_t *dst_p,
    const struct ivt_s_31012025_ivt_msg_cmd_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Cmd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ivt_s_31012025_ivt_msg_cmd_unpack(
    struct ivt_s_31012025_ivt_msg_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVT_Msg_Cmd.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ivt_s_31012025_ivt_msg_cmd_init(struct ivt_s_31012025_ivt_msg_cmd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd_ivt_id_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd_ivt_id_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd_ivt_id_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_trigger_spare_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_trigger_spare_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_trigger_spare_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__10_set_can_id_val_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__10_set_can_id_val_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__10_set_can_id_val_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__11_set_can_id_val_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__11_set_can_id_val_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__11_set_can_id_val_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__12_set_can_id_val_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__12_set_can_id_val_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__12_set_can_id_val_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__13_set_can_id_val_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__13_set_can_id_val_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__13_set_can_id_val_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__14_set_can_id_val_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__14_set_can_id_val_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__14_set_can_id_val_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__15_set_can_id_val_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__15_set_can_id_val_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__15_set_can_id_val_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__16_set_can_id_val_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__16_set_can_id_val_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__16_set_can_id_val_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__17_set_can_id_val_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__17_set_can_id_val_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__17_set_can_id_val_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__1_d_set_can_id_val_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__1_d_set_can_id_val_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__1_d_set_can_id_val_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__1_f_set_can_id_val_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__1_f_set_can_id_val_response_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__1_f_set_can_id_val_response_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__20_conf_sign_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__20_conf_sign_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__20_conf_sign_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__21_conf_sign_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__21_conf_sign_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__21_conf_sign_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__22_conf_sign_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__22_conf_sign_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__22_conf_sign_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__23_conf_sign_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__23_conf_sign_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__23_conf_sign_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__24_conf_sign_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__24_conf_sign_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__24_conf_sign_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__25_conf_sign_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__25_conf_sign_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__25_conf_sign_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__26_conf_sign_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__26_conf_sign_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__26_conf_sign_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__27_conf_sign_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__27_conf_sign_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__27_conf_sign_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__30_reset_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__30_reset_item_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__30_reset_item_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__32_store_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__32_store_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__32_store_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__33_oc_test_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__33_oc_test_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__33_oc_test_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_cmd__35_oc_pos_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__35_oc_pos_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__35_oc_pos_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_cmd__36_oc_neg_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__36_oc_neg_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__36_oc_neg_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__3_a_restart_to_bitrate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__3_a_restart_to_bitrate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__3_a_restart_to_bitrate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__3_d_restart_default_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__3_d_restart_default_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__3_d_restart_default_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__3_f_restart_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__3_f_restart_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__3_f_restart_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__40_get_meas_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__40_get_meas_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__40_get_meas_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__41_get_system_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__41_get_system_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__41_get_system_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__42_get_all_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__42_get_all_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__42_get_all_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__43_get_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__43_get_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__43_get_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__60_get_result_dummy_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__60_get_result_dummy_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__60_get_result_dummy_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__61_get_result_dummy_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__61_get_result_dummy_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__61_get_result_dummy_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__62_get_result_dummy_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__62_get_result_dummy_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__62_get_result_dummy_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__63_get_result_dummy_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__63_get_result_dummy_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__63_get_result_dummy_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__64_get_result_dummy_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__64_get_result_dummy_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__64_get_result_dummy_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__65_get_result_dummy_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__65_get_result_dummy_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__65_get_result_dummy_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__66_get_result_dummy_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__66_get_result_dummy_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__66_get_result_dummy_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__67_get_result_dummy_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__67_get_result_dummy_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__67_get_result_dummy_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__73_get_oc_test_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__73_get_oc_test_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__73_get_oc_test_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__74_get_mode_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__74_get_mode_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__74_get_mode_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__75_get_oc_pos_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__75_get_oc_pos_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__75_get_oc_pos_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__76_get_oc_neg_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__76_get_oc_neg_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__76_get_oc_neg_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__79_get_device_id_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__79_get_device_id_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__79_get_device_id_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__7_a_get_sw_version_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__7_a_get_sw_version_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__7_a_get_sw_version_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__7_b_get_serien_nr_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__7_b_get_serien_nr_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__7_b_get_serien_nr_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__7_c_get_art_nr_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__7_c_get_art_nr_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__7_c_get_art_nr_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__20_conf_endianess_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__20_conf_endianess_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__20_conf_endianess_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__21_conf_endianess_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__21_conf_endianess_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__21_conf_endianess_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__22_conf_endianess_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__22_conf_endianess_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__22_conf_endianess_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__23_conf_endianess_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__23_conf_endianess_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__23_conf_endianess_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__24_conf_endianess_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__24_conf_endianess_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__24_conf_endianess_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__25_conf_endianess_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__25_conf_endianess_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__25_conf_endianess_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__26_conf_endianess_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__26_conf_endianess_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__26_conf_endianess_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__27_conf_endianess_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__27_conf_endianess_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__27_conf_endianess_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__20_conf_trigger_mode_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__20_conf_trigger_mode_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__20_conf_trigger_mode_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__21_conf_trigger_mode_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__21_conf_trigger_mode_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__21_conf_trigger_mode_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__22_conf_trigger_mode_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__22_conf_trigger_mode_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__22_conf_trigger_mode_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__23_conf_trigger_mode_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__23_conf_trigger_mode_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__23_conf_trigger_mode_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__24_conf_trigger_mode_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__24_conf_trigger_mode_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__24_conf_trigger_mode_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__25_conf_trigger_mode_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__25_conf_trigger_mode_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__25_conf_trigger_mode_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__26_conf_trigger_mode_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__26_conf_trigger_mode_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__26_conf_trigger_mode_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__27_conf_trigger_mode_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__27_conf_trigger_mode_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__27_conf_trigger_mode_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__34_actual_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__34_actual_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__34_actual_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_07_trigger_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_07_trigger_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_07_trigger_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__20_conf_cycle_time_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__20_conf_cycle_time_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__20_conf_cycle_time_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__21_conf_cycle_time_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__21_conf_cycle_time_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__21_conf_cycle_time_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__22_conf_cycle_time_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__22_conf_cycle_time_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__22_conf_cycle_time_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__23_conf_cycle_time_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__23_conf_cycle_time_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__23_conf_cycle_time_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__24_conf_cycle_time_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__24_conf_cycle_time_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__24_conf_cycle_time_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__25_conf_cycle_time_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__25_conf_cycle_time_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__25_conf_cycle_time_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__26_conf_cycle_time_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__26_conf_cycle_time_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__26_conf_cycle_time_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__27_conf_cycle_time_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__27_conf_cycle_time_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__27_conf_cycle_time_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_06_trigger_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_06_trigger_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_06_trigger_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_05_trigger_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_05_trigger_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_05_trigger_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_04_trigger_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_04_trigger_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_04_trigger_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_03_trigger_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_03_trigger_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_03_trigger_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_02_trigger_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_02_trigger_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_02_trigger_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_01_trigger_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_01_trigger_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_01_trigger_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__31_00_trigger_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__31_00_trigger_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__31_00_trigger_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ivt_s_31012025_ivt_msg_cmd__34_startup_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__34_startup_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__34_startup_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__10_set_can_id_sn_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__10_set_can_id_sn_i_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__10_set_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__11_set_can_id_sn_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__11_set_can_id_sn_u1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__11_set_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__12_set_can_id_sn_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__12_set_can_id_sn_u2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__12_set_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__13_set_can_id_sn_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__13_set_can_id_sn_u3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__13_set_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__14_set_can_id_sn_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__14_set_can_id_sn_t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__14_set_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__15_set_can_id_sn_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__15_set_can_id_sn_w_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__15_set_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__16_set_can_id_sn_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__16_set_can_id_sn_as_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__16_set_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__17_set_can_id_sn_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__17_set_can_id_sn_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__17_set_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__1_d_set_can_id_sn_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__1_d_set_can_id_sn_command_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__1_d_set_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__1_f_set_can_id_sn_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__1_f_set_can_id_sn_response_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__1_f_set_can_id_sn_response_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__30_reset_device_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__30_reset_device_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__30_reset_device_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ivt_s_31012025_ivt_msg_cmd__34_code_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__34_code_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__34_code_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_cmd__35_oc_pos_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__35_oc_pos_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__35_oc_pos_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ivt_s_31012025_ivt_msg_cmd__36_oc_neg_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__36_oc_neg_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__36_oc_neg_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__50_get_can_id_sn_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__50_get_can_id_sn_i_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__50_get_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__51_get_can_id_sn_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__51_get_can_id_sn_u1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__51_get_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__52_get_can_id_sn_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__52_get_can_id_sn_u2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__52_get_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__53_get_can_id_sn_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__53_get_can_id_sn_u3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__53_get_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__54_get_can_id_sn_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__54_get_can_id_sn_t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__54_get_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__55_get_can_id_sn_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__55_get_can_id_sn_w_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__55_get_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__56_get_can_id_sn_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__56_get_can_id_sn_as_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__56_get_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__57_get_can_id_sn_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__57_get_can_id_sn_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__57_get_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__5_d_get_can_id_sn_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__5_d_get_can_id_sn_command_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__5_d_get_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ivt_s_31012025_ivt_msg_cmd__5_f_get_can_id_sn_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ivt_s_31012025_ivt_msg_cmd__5_f_get_can_id_sn_response_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ivt_s_31012025_ivt_msg_cmd__5_f_get_can_id_sn_response_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
